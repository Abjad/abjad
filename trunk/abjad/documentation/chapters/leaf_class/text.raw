<title> The Abjad Leaf class </title>

<h1>The Abjad <code>_Leaf</code> class</h1>

<introduction>

<p> The Abjad <code>_Leaf</code> class models the functionality that all notes, rests, chords and skips share.

</introduction>

<interface>
<attributes>
   <inherited> accidentals
   <local> articulations
   <inherited> barline
   <local> beam
   <local> clef
   <local> dots
   <local> duration
   <local> dynamics
   <inherited> format
   <local> formatter
   <local> glissando
   <local> grace
   <local> harmonic
   <local> leaves
   <local> next
   <local> number
   <local> offset
   <local> prev
   <local> spanners
   <local> staff
   <local> stem
   <inherited> tempo
   <local> tie
   <local> tremolo
   <local> trill
</attributes>
<methods>
   <inherited> copy( )
   <inherited> kind( )
</methods>
<overloads>
   <local> __init__
   <inherited> __mul__
   <inherited> __rmul__
</overloads>
</interface>

<section> Attributes

<introduction>

<p> The Abjad <code>_Leaf</code> class is an abstract class and is not meant to be instantiated by hand.

<p> But we show examples of <code>_Leaf</code> attributes here using note, rest and chords as concrete examples of the <code>_Leaf</code> class.

</introduction>

<definition>
<header>
   <inherited> accidentals
  	<p> NOT IMPLEMENTED
</header>
</definition>

<definition>
<header>
   <local> articulations
	<p> Read / write attribute defined here.
	<p> Returns Abjad <_ArticulationsInterface>.
	<p> Accepts Python list or Python tuple of zero or more LilyPond articulation strings, <code>None</code>.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   abjad> note.articulations = ['staccato']
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <inherited> barline
	<p> Read / write attribute inherited from <_Component>.
	<p> Returns Abjad <_BarlineInterface>.
	<p> Accepts LilyPond barline string, <code>None</code>.
	<p> See <a href="../component_class/index.html#barline">example</a>.
</header>
</definition>

<definition>
<header>
   <local> beam
	<p> Read-only attribute defined here.
	<p> Returns Abjad <_BeamInterface>.
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   abjad> chord.beam
   _BeamInterface
</abjad>
</body>
</definition>

<definition>
<header>
   <local> clef
	<p> Read / write attribute defined here.
	<p> Returns Abjad <_ClefInterface>.
	<p> Accepts LilyPond clef string, Abjad <_Clef> instance, <code>None</code>.
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chord.clef = 'alto'
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> dots
	<p> Read-only attribute defined here.
	<p> Returns Abjad <_DotsInterface>.
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chord.dots
   _DotsInterface( )
</abjad>
</body>
</definition>

<definition>
<header>
   <local> duration
	<p> Read / write attribute defined here.
	<p> Returns Abjad <_LeafDurationInterface>.
	<p> Accepts <a href="../duration_token/index.html">duration token</a>.
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chord.duration = (3, 8)
   hide> measure = Measure((3, 8), [chord])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> dynamics
	<p> Read / write attribute defined here.
	<p> Returns Abjad <_DynamicsInterface>.
	<p> Accepts LilyPond dynamics string, <code>None</code>.
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chord.dynamics = 'f'
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <inherited> format
	<p> Read-only attribute inherited from <_Component>.
	<p> Returns LilyPond input string.
	<p> See <a href="../component_class/index.html#format">example</a>.
</header>
</definition>

<definition>
<header>
   <local> formatter
	<p> Read-only attribute defined here.
	<p> Returns Abjad <code>_LeafFormatter</code>.
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   abjad> chord.formatter
   _ChordFormatter( )
</abjad>
</body>
</definition>

<definition>
<header>
   <local> glissando
	<p> Read / write attribute defined here.
	<p> Returns Abjad <_GlissandoInterface>.
	<p> Accepts <code>True</code>, <code>False</code>.
</header>
<body>
<abjad>
   abjad> notes = [Note(0, (1, 4)), Note(2, (1, 4))]
   hide> measure = Measure((2, 4), notes)
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> notes = [Note(0, (1, 4)), Note(2, (1, 4))]
   hide> measure = Measure((2, 4), notes)
   hide> measure.meter.transparent = True
   abjad> notes[0].glissando = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> grace
	<p> Read-only attribute defined here.
	<p> Returns Abjad <_GraceInterface>.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.grace.before.append(Note(2, (1, 16)))
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> harmonic
	<p> Read / write attribute defined here.
	<p> Returns Abjad <_HarmonicInterface>.
	<p> Accepts <code>True</code>, <code>False</code>.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.harmonic = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> leaves
	<p> Read-only attribute defined here.
	<p> Returns one-element Python list comprising only <code>self</code>.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.leaves
   [Note(c', 4)]
</abjad>
</body>
</definition>

<definition>
<header>
   <local> next
	<p> Read-only attribute defined here.
	<p> Returns reference to next-leaf-in-container after <code>self</code>.
</header>
<body>
<abjad>
   abjad> note1 = Note(-1, (1, 4))
   abjad> chord = Chord([0, 2, 10], (1, 4))
   abjad> note2 = Note(9, (1, 4))
   abjad> measure = Measure((1, 4), [note1, chord, note2])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note1 = Note(-1, (1, 4))
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> note2 = Note(9, (1, 4))
   hide> measure = Measure((1, 4), [note1, chord, note2])
   hide> measure.meter.transparent = True
   abjad> chord.next
   Note(a', 4)
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> number
	<p> Read-only attribute defined here.
	<p> Returns zero-indexed integer representing the in-container position of chord.
</header>
<body>
<abjad>
   abjad> measure = Measure((4, 4), [Note(x, (1, 8)) for x in range(8, 0, -1)])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> measure = Measure((4, 4), [Note(x, (1, 8)) for x in range(8, 0, -1)])
   hide> measure.meter.transparent = True
   abjad> measure[6].number
   6
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> offset
	<p> Read-only attribute defined here.
	<p> Returns Abjad <code>Rational</code> representing the amount of in-container musical time prior to the start of <code>self</code>.
</header>
<body>
<abjad>
   abjad> measure = Measure((4, 4), [Note(x, (1, 8)) for x in range(8, 0, -1)])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> measure = Measure((4, 4), [Note(x, (1, 8)) for x in range(8, 0, -1)])
   hide> measure.meter.transparent = True
   abjad> measure[6].offset
   Rational(3, 4)
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> prev
	<p> Read-only attribute defined here.
	<p> Returns reference to prev-leaf-in-container after <code>self</code>.
</header>
<body>
<abjad>
   abjad> note1 = Note(-1, (1, 4))
   abjad> chord = Chord([0, 2, 10], (1, 4))
   abjad> note2 = Note(9, (1, 4))
   abjad> measure = Measure((1, 4), [note1, chord, note2])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note1 = Note(-1, (1, 4))
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> note2 = Note(9, (1, 4))
   hide> measure = Measure((1, 4), [note1, chord, note2])
   hide> measure.meter.transparent = True
   abjad> chord.prev
   Note(b, 4)
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> spanner
	<p> Read-only attribute defined here.
	<p> (Actually, the <code>spanners</code> attribute can be overwritten by the user. But don't do this.)
	<p> Returns Abjad <_LeafSpannerInterface>.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.spanners
   _LeafSpannerInterface( )
</abjad>
</body>
</definition>

<definition>
<header>
   <local> staff
	<p> Read / write attribute defined here.
	<p> Returns reference to the Abjad <_Staff>.
	<p> Accepts reference to Abjad <_Staff>.
	<p> Use for setting cross-staff notes, chords, rests.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.staff is None
   True
</abjad>
</body>
</definition>

<definition>
<header>
   <local> stem
	<p> Read-only attribute defined here.
	<p> Returns Abjad <_StemInterface>.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   abjad> note.stem
   _StemInterface( )
</abjad>
</body>
</definition>

<definition>
<header>
   <inherited> tempo
	<p> Read-only attribute inherited from <_Component>.
	<p> Returns Abjad <_TempoInterface>.
	<p> See <a href="../component_class/index.html#tempo">example</a>.
</header>
</definition>

<definition>
<header>
   <local> tie
	<p> Read / write attribute defined here.
	<p> Returns Abjad <_TieInterface>.
	<p> Accepts <code>True</code>, <code>False</code>.
</header>
<body>
<abjad>
   abjad> notes = Note(0, (1, 4)) * 2
   hide> measure = Measure((2, 4), notes)
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> notes = Note(0, (1, 4)) * 2
   hide> measure = Measure((2, 4), notes)
   hide> measure.meter.transparent = True
   abjad> notes[0].tie = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> tremolo
	<p> Read-only attribute defined here.
	<p> Returns Abjad <_TremoloInterface>.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.tremolo.subdivision = 32
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> trill
	<p> Read-only attribute defined here.
	<p> Returns Abjad <_TrillInterface>.
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.trill
   _TrillInterface( )
</abjad>
</body>
</definition>

<section> Methods

<definition>
<header>
   <inherited> copy( )
   <p> copy( )
	<p> Bound method inherited from <_Component>.
	<p> Returns a new copy of <code>self</code>.
	<p> Accepts no input parameters.
	<p> See <a href="../component_class/index.html#copy">example</a>.
</header>
</definition>

<definition>
<header>
   <inherited> kind( )
   <p> kind(<i>classname</i>)
	<p> Bound method inherited from <_Component>
	<p> Return <code>True</code> if <code>classname</code> in class hierarchy of <code>self</code>, and <code>False</code> otherwise.
	<p> DEPRECATED. Use <code>isinstance( )</code> instead.
	<p> See <a href="../component_class/index.html#kind">example</a>.
</header>
</definition>

<section> Overloads

<definition>
<header>
   <local> __init__
   <p> __init__(<i>duration</i>)
	<p> Special method defined here.
	<p> Abjad <code>_Leaf</code> class is not meant to be instantiated by hand.
</header>
</definition>

<definition>
<header>
   <inherited> __mul__
   <p> __mul__(<i>n</i>)
	<p> Special method inherited from <_Component>.
	<p> Implements left-handed multiplication against <code>self</code>.
	<p> Returns Python list of <code>n</code> copies of <code>self</code>.
	<p> See <a href="../component_class/index.html#mul">example</a>.
</header>
</definition>

<definition>
<header>
   <inherited> __rmul__
   <p> __rmul__(<i>n</i>)
	<p> Special method inherited from <_Component>.
	<p> Implements right-handed multiplication against <code>self</code>. 
	<p> Returns Python list of <code>n</code> copies of <code>self</code>.
	<p> See <a href="../component_class/index.html#rmul">example</a>.
</header>
</definition>

<comments>

<p> See the <code>_Leaf</code> class in <code>leaf/leaf.py</code> for implementation details.

</comments>

<to-do>

<p> Should <code>accidentals</code> promote to a full interface?

<p> Clean up the way <code>staff</code> works; is it a full interface or not?

<p> Should we move <code>formatter</code> out of the 'interfaces' section?

</to-do>
