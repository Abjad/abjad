<h1>
The Abjad <code>_ArticulationsInterface</code> class
</h1>

<p>
The Abjad <code>_ArticulationsInterface</code> class manages note, rest and chord articulations.
</p>

<h2 class="page-section">
Public interface
</h2>

<div class="interface-block">
   <p class="interface-block-header"> Attributes </p>
   <p class="interface-attribute-inherited"> first </p>
   <p class="interface-attribute-inherited"> last </p>
   <p class="interface-attribute-inherited"> only </p>
   <p class="interface-attribute-inherited"> spanned </p>
   <p class="interface-attribute-inherited"> spanner </p>
   <p class="interface-attribute-inherited"> spanners </p>
</div>

<div class="interface-block">
   <p class="interface-block-header"> Methods </p>
   <p class="interface-attribute"> append( ) </p>
   <p class="interface-attribute-inherited"> clear( ) </p>
   <p class="interface-attribute-inherited"> copy( ) </p>
   <p class="interface-attribute"> extend( ) </p>
   <p class="interface-attribute"> insert( ) </p>
   <p class="interface-attribute"> pop( ) </p>
   <p class="interface-attribute"> remove( ) </p>
   <p class="interface-attribute"> sort( ) </p>
   <p class="interface-attribute-inherited"> unspan( ) </p>
</div>

<div class="interface-block">
   <p class="interface-block-header"> Overloads </p>
   <p class="interface-attribute"> __contains__ </p>
   <p class="interface-attribute"> __len__ </p>
   <p class="interface-attribute"> __getitem__ </p>
</div>

<h2 class="page-section">
Examples
</h2>

<p>
Abjad 
<code>Note</code>,
<code>Rest</code>,
<code>Skip</code> and 
<code>Chord</code>
can have articulations.
Articulations are managed through the articulations interface. 
</p>

<pre>
abjad> note = Note(0, (1, 4))
abjad> note.articulations
Articulations( )
</pre>

<p>
Articulations can be set directly as a list of articulation descriptors.
These descriptors can be either a single Python string giving the type of articulation (e.g. <code>'tenuto'</code>, <code>'marcato'</code>, etc.), 
</p>
<pre>
abjad> note = Note(0, (1, 4))
abjad> note.articulations = ['marcato', 'tenuto']
abjad> note.articulations
Articulations(-\marcato, -\tenuto)
abjad> show(note)
</pre>
<p>
or a pair of strings of the form <code>('type', 'placement')</code>, where <code>'type'</code> gives the articulation type, as above, and <code>'placement'</code> indicates its placement relative to the note.  
</p>
<pre>
abjad> note = Note(0, (1, 4))
abjad> note.articulations = [('marcato', 'up'), ('tenuto', 'down')]
abjad> note.articulations
Articulations(^\marcato, _\tenuto)
abjad> show(note)
</pre>
<p>
Valid strings for placement indication are 
<code>'up'</code>, 
<code>'down'</code>, 
<code>'default'</code> and their respective shortcuts
<code>'^'</code>, 
<code>'_'</code>  and
<code>'-'</code>. 


<p>
All articulations can we removed by assigning <code>None</code> to the articulations interface.
</p>
<pre>
abjad> note = Note(0, (1, 4))
abjad> note.articulations = None
abjad> note.articulations
Articulations( )
</pre>

<p>
The articulations interface behaves like a Python list, so it implements the following methods: 
<ul>
   <li> <code>append( )</code>
   <li> <code>extend( )</code>
   <li> <code>remove( )</code>
   <li> <code>pop( )</code>
   <li> <code>insert( )</code>
   <li> <code>sort( )</code>
</ul>
All work as you would expect. 
</p>

<h2 class="end-of-page">Comments</h2>

<p class="comment">
Do we need to describe every list-like method here? Seems like we shouldn't. <i>Nope. Listing the methods here works great.</i>
</p>
