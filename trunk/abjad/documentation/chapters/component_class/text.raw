<h1>The Abjad <_Component> class</h1>

<subsection>

<p>The Abjad <_Component> class models the functionality that all leaves and containers share.

</subsection>

<interface>
<attributes>
   <local> accidentals
   <local> barline
   <local> comments
   <local> format
   <local> tempo
</attributes>
<methods>
   <local> copy( )
   <local> kind( )
</methods>
<overloads>
   <local> __mul__
   <local> __rmul__
</overloads>
</interface>

<section>Attributes

<subsection>

<p>
The Abjad <_Component> class is an abstract class not meant to be instantiated by hand.
</p>

<p>
But we show examples of <_Component> attributes here using notes and staves as concrete examples of the <_Component> class.
</p>

</subsection>

<definition>
<header>
   <local> accidentals
   <p>Read / write attribute defined here.</p>
   <p>Returns LilyPond accidentals style string.</p>
   <p>Accepts LilyPond accidentals style string, <code>None</code>.</p>
</header>
<body>
<abjad>
   abjad> staff = Staff(Note(1, (1, 4)) * 4)
</abjad>
<abjad>
   hide> staff = Staff(Note(1, (1, 4)) * 4)
   abjad> staff.accidentals = 'forget'
   hide> show(staff)
</abjad>
</body>
</definition>



<definition>
<header>
   <local> barline
   <p>Read / write attribute defined here.</p>
   <p>Returns LilyPond barline string.</p>
   <p>Accepts LilyPond barline string, <code>None</code>.</p>
</header>
<body>
<abjad>
   abjad> staff = Staff(Note(1, (1, 4)) * 4)
</abjad>
<abjad>
   hide> staff = Staff(Note(1, (1, 4)) * 4)
   abjad> staff.barline = '|.'
   hide> show(staff)
</abjad>
</body>
</definition>



<definition>
<header>
   <local> comments
   <p>Read-only attribute defined here.</p>
   <p>Returns LilyPond <_Comments> object.</p>
</header>
<body>
<abjad>
   abjad> staff = Staff(Note(1, (1, 4)) * 4)
   abjad> staff.comments.append("All notes here exhibit the same pitch.")
</abjad>
<pre>
% All notes here exhibit the same pitch.
\new Staff {
   cs'4
   cs'4
   cs'4
   cs'4
}
</pre>
</body>
</definition>



<definition>
<header>
   <local> format
   <p>Read-only attribute defined here.</p>
   <p>Returns LilyPond input string.</p>
</header>
<body>
<abjad>
   abjad> staff = Staff(Note(0, (1, 4)) * 4)
</abjad>
<abjad>
   hide> staff = Staff(Note(0, (1, 4)) * 4)
   abjad> staff.format
   "\\new Staff {\n\tc'4\n\tc'4\n\tc'4\n\tc'4\n}"
</abjad>
</body>
</definition>



<definition>
<header>
   <local> tempo
   <p>Read / write attribute defined here.</p>
   <p>Returns LilyPond <_TempoInterface>.</p>
   <p>Accepts Abjad <tempo token>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   abjad> note.tempo = ((3, 8), 52)
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   hide> show(note)
</abjad>
</body>
</definition>



<section>Methods


<definition>
<header>
   <local> copy( )
   <p> Bound method implemented here.
   <p> Returns a new copy of <code>self</code>.
   <p> Accepts no input parameters.
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> new = chord.copy( )
   hide> measure = Measure((2, 4), [chord, new])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> new = chord.copy( )
   abjad> id(chord) != id(new)
   True
</abjad>
</body>
</definition>



<definition>
<header>
   <local> kind( )
   <p> Bound method implemented here.
   <p> Return <code>True</code> if <code>classname</code> in class hierarchy of <code>self</code>, and <code>False</code> otherwise.
   <p> DEPRECATED. Use <code>isinstance( )</code> instead.
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
<abjad>
   abjad> chord.kind('Chord')
   True
</abjad>
</body>
</definition>


<section>Overloads


<definition>
<header>
   <local> __mul__
   <p>Special method implemented here.</p>
   <p>Implements left-handed multiplication against <code>self</code>.</p>
   <p>Returns a Python list of <code>n</code> copies of <code>self</code>.</p>
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chords = chord * 4
   hide> measure = Measure((4, 4), chords)
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>


<definition>
<header>
   <local> __rmul__
   <p>Special method implemented here.</p>
   <p>Implements right-handed multiplication against <code>self</code>.</p>
   <p>Returns a Python list of <code>n</code> copies of <code>self</code>.</p>
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chords = 4 * chord
   hide> measure = Measure((4, 4), chords)
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>


<comments>

<p>
See the <_Component> class in <code>core/component.py</code> for implementation details.
</p>

</comments>
