<title> The Abjad _Accidental class </title>

<h1> The Abjad <code>_Accidental</code> class </h1>

<p> The Abjad <code>_Accidental</code> class models accidentals.

<interface>
<attributes>
   <local> adjustment
   <local> string
</attributes>
<dictionaries>
   <local> accidentalStringToAdjustment[ ]
   <local> adjustmentToAccidentalString[ ]
</dictionaries>
<methods>
   <local> hasNone( )
</methods>
<overloads>
   <local> __eq__
</overloads>
</interface>

<section> Attributes

<definition>
<header>
   <local> adjustment
   <p> Read-only attribute defined here.
   <p> Returns number of semitones adjustment carried by <code>self</code>.
</header>
<body>
   <abjad>
      abjad> note = Note(13, (1, 4))
   </abjad>
   <abjad>
      hide> note = Note(13, (1, 4))
      abjad> note.pitch.accidental.adjustment
      1
      hide> measure = Measure(note.duration.pair, [note])
      hide> measure.meter.transparent = True
      hide> show(measure)
   </abjad>
</body>
</definition>

<definition>
<header>
   <local> string
   <p> Read-only attribute defined here.
   <p> Returns string representation of <code>self</code>.
</header>
<body>
   <abjad>
      abjad> note = Note(13, (1, 4))
   </abjad>
   <abjad>
      hide> note = Note(13, (1, 4))
      abjad> note.pitch.accidental.string
      's'
      hide> measure = Measure((1, 4), [note])
      hide> measure.meter.stencil = False
      hide> show(measure)
   </abjad>
</body>
</definition>

<section> Dictionaries

<definition>
<header>
   <local> accidentalStringToAdjustment[ ]
   <p> Read-only attribute defined here.
   <p> Returns numbers of semitones equal to accidental string.
   <p> Accepts accidental string.
</header>
<body>
   <abjad>
      abjad> note = Note(13, (1, 4))
   </abjad>
   <abjad>
      abjad> note.pitch.accidental.accidentalStringToAdjustment['tqs']
      1.5
   </abjad>
</body>
</definition>

<definition>
<header>
   <local> adjustmentToAccidentalString[ ]
   <p> Read-only attribute defined here.
   <p> Returns accidental string corresponding to numeric input adjustment.
   <p> Accepts numeric adjustment.
</header>
<body>
   <abjad>
      abjad> note = Note(13, (1, 4))
   </abjad>
   <abjad>
      abjad> note.pitch.accidental.adjustmentToAccidentalString[-1]
      'f'
   </abjad>
</body>
</definition>

<section> Methods

<definition>
<header>
   <local> hasNone( )
   <p> Read-only attribute defined here.
   <p> Returns <code>True</code> when parent note carries no accidental.
</header>
<body>
   <abjad>
      abjad> note = Note(13, (1, 4))
   </abjad>
   <abjad>
      hide> note = Note(13, (1, 4))
      abjad> note.pitch.accidental.hasNone( )
      False
      hide> measure = Measure((1, 4), [note])
      hide> measure.meter.stencil = False
      hide> show(measure)
   </abjad>
</body>
</definition>

<section> Overloads

<definition>
<header>
   <local> __eq__
   <p> Read-only attribute defined here.
   <p> Returns <code>True</code> when <code>self</code> equals <code>rhs</code>, otherwise <code>False</code>.
</header>
<body>
   <abjad>
      abjad> note = Note(13, (1, 4))
   </abjad>
   <abjad>
      hide> note = Note(13, (1, 4))
      abjad> note.pitch.accidental == 's'
      True
      hide> measure = Measure((1, 4), [note])
      hide> measure.meter.stencil = False
      hide> show(measure)
   </abjad>
</body>
</definition>

<comments>
<p> LilyPond implements several different accidental handling methods.
Abjad outputs LilyPond input with no special indications for accidental handling.
Nontonal music may prefer to use the LilyPond <code>'forget</code> option for handling accidentals.
<p> Do we have an Abjad-native way of setting <code>'forget</code>?
</comments>

<to-do>
<p> Reimplement Java-style <code>hasNone( )</code> as read-only <code>none</code> attribute.
</to-do>
