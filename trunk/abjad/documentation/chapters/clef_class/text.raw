<title> The Abjad _Clef class </title>

<h1> The Abjad <code>_Clef</code> class </h1>

<introduction>

<p> The Abjad <code>_Clef</code> class models clefs.

</introduction>

<interface>
<attributes>
   <local> format
   <local> middleCPosition
   <local> name
</attributes>
<dictionaries>
   <local> clefNameToMiddleCPosition[ ]
</dictionaries>
<overloads>
   <local> __eq__
   <local> __init__
   <local> __repr__
   <local> __str__
</overloads>
</interface>

<section> Attributes

<definition>
<header>
   <local> format
   <p> Read-only attribute defined here.
   <p> Returns LilyPond input version of <code>self</code>.
</header>
<body>
   <abjad>
      abjad> note = Note(0, (1, 4))
   </abjad>
   <abjad>
      hide> note = Note(0, (1, 4))
      abjad> note.clef.effective.format
      '\\clef treble'
      hide> measure = Measure(note.duration.written.pair, [note])
      hide> measure.meter.transparent = True
      hide> show(measure)
   </abjad>
</body>
</definition>

<definition>
<header>
   <local> middleCPosition
   <p> Read-only attribute defined here.
   <p> Returns LilyPond staffline count of middle C position.
</header>
<body>
   <abjad>
      abjad> note = Note(0, (1, 4))
   </abjad>
   <abjad>
      hide> note = Note(0, (1, 4))
      abjad> note.clef.effective.middleCPosition
      -6
      hide> measure = Measure((1, 4), [note])
      hide> measure.meter.transparent = True
      hide> show(measure)
   </abjad>
</body>
</definition>

<definition>
<header>
   <local> name
   <p> Read / write attribute defined here.
   <p> Return LilyPond clef name string.
   <p> Accepts LilyPond clef name string, <code>None</code>.
</header>
<body>
   <abjad>
      abjad> note = Note(0, (1, 4))
      abjad> note.clef = 'alto'
   </abjad>
   <abjad>
      hide> note = Note(0, (1, 4))
      hide> note.clef = 'alto'
      abjad> note.clef.name
      'alto'
      hide> measure = Measure((1, 4), [note])
      hide> measure.meter.transparent = True
      hide> show(measure)
   </abjad>
</body>
</definition>

<section> Dictionaries

<definition>
<header>
   <local> clefNameToMiddleCPosition[ ]
   <p> Read-only attribute defined here.
   <p> Returns LilyPond staff line position of middle C for <code>self</code>.
   <p> Accepts LilyPond clef name string.
</header>
<body>
   <abjad>
      abjad> note = Note(0, (1, 4))
   </abjad>
   <abjad>
      abjad> note.clef.effective.clefNameToMiddleCPosition['bass']
      6
   </abjad>
</body>
</definition>

<section> Overloads

<definition>
<header>
   <local> __eq__
   <p> Read-only attribute defined here.
   <p> Returns <code>True</code> when <code>self.name</code> equals <code>arg.name</code>, otherwise <code>False</code>.
</header>
<body>
   <abjad>
      abjad> n1 = Note(0, (1, 4))
      abjad> n1.clef = 'alto'
      abjad> n2 = Note(0, (1, 4))
      abjad> n2.clef = 'treble'
   </abjad>
   <abjad>
      hide> n1 = Note(0, (1, 4))
      hide> n1.clef = 'alto'
      hide> n2 = Note(0, (1, 4))
      hide> n2.clef = 'treble'
      abjad> n1.clef == n2.clef
      False
   </abjad>
</body>
</definition>

<definition>
<header>
   <local> __init__
   <p> Read-only attribute defined here.
   <p> Initializes <code>self</code>.
   <p> Accepts LilyPond clef name string.
</header>
</definition>

<definition>
<header>
   <local> __repr__
   <p> Read-only attribute defined here.
   <p> Returns Python interpreter representation.
</header>
<body>
   <abjad>
      abjad> note = Note(0, (1, 4))
      abjad> note.clef.effective
      Clef('treble')
   </abjad>
</body>
</definition>

<definition>
<header>
   <local> __str__
   <p> Read-only attribute defined here.
   <p> Returns string version of <code>self</code> equal to <code>name</code>.
</header>
<body>
   <abjad>
      abjad> note = Note(0, (1, 4))
      abjad> str(note.clef.effective)
      'treble'
   </abjad>
</body>
</definition>
