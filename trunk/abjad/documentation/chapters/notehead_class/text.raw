<h1>The Abjad <code>_NoteHead</code> class</h1>

<p>
The Abjad <code>_NoteHead</code> interface class models musical noteheads.
This chapter describes the different bound methods defined against the Abjad <code>_NoteHead</code> class.
</p>

<p class="spacer"/>

<h2>Creating noteheads</h2>

<p>
The Abjad <code>_NoteHead</code> interface is a <strong>private</strong> class (as indicated by the _ before the class name). As such, it cannot be created directly and independently from a <code>Note</code> or <code>Chord</code> object. 
<code>Note</code> and <code>Chord</code> are the only two Abjad Components that have <code>_NoteHead</code> attributes. 
</p>

<pre>
  abjad> note = Note(0, (1, 4))
  abjad> note.notehead
  _NoteHead(c', 4)
</pre>
<pre>
  abjad> chord = Chord([0, 2] (1, 4))
  abjad> note.noteheads
  [_NoteHead(c'), _NoteHead(d')]
</pre>
<p>
Notice that a <code>Note</code> object has a <code>_NoteHead</code> interface directly attached to it, while the <code>Chord</code> object has a <strong>noteheads</strong> list of <code>_NoteHead</code> interfaces. 


<p>
A <code>_NoteHead</code> interface inherits from the abstract <code>_Interface</code>, and thus carries all the <code>_Interface</code> attributes. See the <code>_Interface</code> reference for details <b>TODO: add hyperlink here</b>.  <code>_NoteHead</code> has two important unique managed public attributes:  
</p>
<ul>
   <li> <code>shape</code>
   <li> <code>pitch</code>
</ul>


<h3>Setting Notehead shape</h3>
<p>
A Notehead shape must be set with a Python string naming the desired notehead shape. 
</p>
<pre>
  abjad> note = Note(0, (1, 4))
  abjad> note.notehead.shape = 'cross'
  abjad> f(note)
  \once \override NoteHead #'style = #'cross
  c'4
  abjad> show(note)
</pre>
<p>
Notice how the notehead is formatted when applying the formatting function <code>f( )</code>. <strong>Known</strong> or recognized shapes, such as <code>'cross'</code>, will be formatted in the appropriate LilyPond input format.  
<strong>Unknown</strong> shapes, such as <code>'myVeryOwnShape'</code> is not an allowed LilyPond notehead shape, and is thus formatted like so:
</p>
<pre>
  abjad> note.notehead.shape = 'myVeryOwnShape'
  abjad> f(note)
  \myVeryOwnShape
  c'4
</pre>
<p>
Unknown shapes are permitted and formatted differently to allow the user to define his/her own shapes with LilyPond <strong>identifiers</strong>. In this case, the user is responsible to define the <strong>identifiers</strong> for the <code>show( )</code> function to properly compile the LilyPond output. 
</p>
<p>
The following are the supported shapes:
<ul>
<li><code>'cross'</code> 
<li><code>'parallelogram'</code> 
<li><code>'concavetriangle'</code> 
<li><code>'slash'</code> 
<li><code>'xcircle'</code> 
<li><code>'neomensural'</code> 
<li><code>'harmonic'</code> 
<li><code>'mensural'</code> 
<li><code>'petruccidiamond'
<li><code>'triangle'</code> 
<li><code>'semicircle' </code> 
<li><code>'diamond'</code> 
<li><code>'tiltedtriangle'</code>
<li><code>'square'</code> 
<li><code>'wedge'</code> 
</ul>
</p>


<h3>Setting Notehead pitch</h3>
<p>
A Notehead pitch attribute can be set in two ways: 
<ul>
   <li>With a number representing the pitch in semitones from middle C.
   <li>With a <code>Pitch</code> object (Refer to the <code>Pitch</code> class section for details on <code>Pitch</code> initialization.  
</ul>
</p>
<pre>
  abjad> note = Note(0, (1, 4))
  abjad> note
  Note(c', 4)
  abjad> note.notehead.pitch = 10
  abjad> note
  Note(bf', 4)

  abjad> p = Pitch('cs', 5)
  abjad> p
  Pitch(cs, 5)
  abjad> note.notehead.pitch = p
  abjad> note
  Note(cs'', 4)
</pre>


<h2 class="end-of-page">Comments</h2>

<p class="comment">
Do we want to change the <strong>shape</strong> attribute to <strong>style</strong> as suggested in the Abjad blog?
</p>

<h2 class="end-of-page">To-do</h2>
<p class="to-do">
Link <strong>identifiers</strong> to glossary. 
</p>


