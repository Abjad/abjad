This is **paragraph 1**.
Now comes some Abjad code

<abjad>
voice = Voice("c'8 d'8 e'8")
beam = spannertools.BeamSpanner()
beam.attach(voice)
show(voice)
len(beam)
show(voice)
</abjad>

Here is **paragraph 2**, and more Abjad code. Notice that in the second block
of abjad code I can reference objects and variables created in previous blocks:

<abjad>
trill = spannertools.TrillSpanner()
trill.attach(voice[4:])
f(voice)
show(voice)
</abjad>

Here is **paragraph 3**, and now a function definition.  Note that this
function definition can be used later.  The **strip_prompt=true** option tells
abjad-book to print the code block as though it wasn't passed to the
interpreter.

<abjad>[strip_prompt=true]
def apply_articulations(components):
    for i, component in enumerate(components):
        if i % 2 == 0:
            articulation = marktools.Articulation('.')
            articulation.attach(component)
        else:
            articulation = marktools.Articulation('^')
            articulation.attach(component)
</abjad>

Here is **paragraph** 4, where we use the previous function to change the Voice
we previously instantiated.

<abjad>
apply_articulations(voice)
show(voice)
</abjad>

And a final paragraph.
