" 0. preamble
" ===========

autocmd! bufwritepost .vimrc source %
call pathogen#infect()
filetype off
filetype plugin indent on
syntax on
let mapleader = ","


" 1. settings (alphabetical)
" ==========================

set autoindent
set autoread
set backspace=2
set background=light
set clipboard=unnamed
set colorcolumn=80
set completeopt=menuone,preview
set encoding=utf-8
set expandtab
set fileencodings=utf-8,latin1
set foldlevel=1
set foldmethod=indent
set foldminlines=0
set foldnestmax=2
set helpheight=80
set history=700
set incsearch
set mouse=a
set nobackup
set noswapfile
set nowrap
set nowritebackup
set paste
set pastetoggle=<F2>
set ruler
set shiftround
set shiftwidth=4
set showcmd
set showmatch
set showmode
set smartcase
set softtabstop=4
set scrolloff=7
set showtabline=2
set tabstop=4
set tags=./tags
set textwidth=79
set title
set undolevels=700
set wildignore+=*.pyc
set wildignore+=*/coverage/*
set wildignore+=*_build/*
set wildmode=list:longest


" 2. mappings (alphabetical)
" ==========================

" debugging
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>

" comments
noremap <F4> <Esc>:'a,'bs/#//<CR>
noremap <F6> <Esc>:'a,'bs/^/#/<CR>
vnoremap <F4> :s/#//<CR>
vnoremap <F6> :s/^/#/<CR>

" copy & paste
vmap <C-y> y:call system("xclip -i -selection clipboard", getreg("\""))<CR>:call system("xclip -i", getreg("\""))<CR>
nmap <C-v> :call setreg("\"",system("xclip -o -selection clipboard"))<CR>p
imap <C-v> <Esc><C-v>a

" cursor vertical center
:nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>

" folding
noremap <Leader>zm zMzr

" indentation 
vnoremap < <gv
vnoremap > >gv
map <Leader>a ggVG

" linesort 
vnoremap <Leader>s :sort<CR>
noremap <Leader>ab :'a,'bsort<CR>

" settings reload & view
map <Leader>v :source ~/.vimrc<CR>
map <Leader>vv :edit ~/.vimrc<CR>

" tab navigation 
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" window navigation 
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" write & quit
noremap <Leader>w :write<CR>
noremap <Leader>q :quit<CR>
noremap <Leader>wq :wq<CR>


" 3. plugins (alphabetical)
" =========================

" ctrlp (https://github.com/kien/ctrlp.vim)
let g:ctrlp_by_filename = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_custom_ignore = '__init__.py'
let g:ctrlp_lazy_update = 1
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_max_height = 30
map <Leader>jj :CtrlP $ABJADTRUNK/abjad<CR>
map <Leader>jx :CtrlP $ABJADEXPERIMENTAL<CR>
map <Leader>jt :CtrlP $ABJADTRUNK<CR>
map <Leader>sm :CtrlP $ABJADEXPERIMENTAL/tools/scoremanagertools<CR>

" jedi-vim (https://github.com/davidhalter/jedi-vim)
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#related_names_command = "<leader>z"

" vim-powerline (https://github.com/Lokaltog/vim-powerline)
set laststatus=2
let g:Powerline_symbols = 'compatible'
let g:Powerline_stl_path_style = 'filename'
call Pl#Theme#RemoveSegment('scrollpercent')
call Pl#Theme#RemoveSegment('fileformat')
call Pl#Theme#RemoveSegment('fileencoding')
call Pl#Theme#RemoveSegment('filetype')


" 4. other
" ========

" omnipopup (http://stackoverflow.com/a/2170800/70778)
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction
inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>

" rename tabs to show tab# and # of viewports
" (http://stackoverflow.com/q/5927952)
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')
            let s .= (i== t ? '%#TabNumSel#' : '%#TabNum#')
            let s .= i
            if tabpagewinnr(i,'$') > 1
                let s .= '.'
                let s .= (i== t ? '%#TabWinNumSel#' : '%#TabWinNum#')
                let s .= (tabpagewinnr(i,'$') > 1 ? wn : '')
            end
            let s .= ' %*'
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= file
            let s .= (i == t ? '%m' : '')
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
endif
hi TabLineSel term=bold cterm=bold ctermfg=16 ctermbg=229
hi TabWinNumSel term=bold cterm=bold ctermfg=90 ctermbg=229
hi TabNumSel term=bold cterm=bold ctermfg=16 ctermbg=229
hi TabLine term=underline ctermfg=16 ctermbg=145
hi TabWinNum term=bold cterm=bold ctermfg=90 ctermbg=145
hi TabNum term=bold cterm=bold ctermfg=16 ctermbg=145
