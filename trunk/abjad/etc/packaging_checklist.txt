Abjad packaging checklist:

 1. Open abjad/etc/packaging_transcript.txt and create a new entry.
    Record the date of packaging in the packaging transcript.
    Record the revision of repository in the packaging transcript.

 2.  Document the packaging environment in the packaging transcript.
    (a) Apply any OS updates to the machine on which you will produce the package.
        Record the output of "uname -v" in the packaging transcript.

    (b) Decide whether to upgrade svn.
        OS X svn binaries are available at http://subversion.apache.org/packages.html#osx.
        The openCollabNet universal build maintained by Jeremy Whitlock is recomended.
        Regardless of whether svn is upgraded or not, record the output of "svn --version".

    (c) If necessary, upgrade Python on the packaging machine.
        Python upgrade procedures are OS-dependent.
        Record the output of "python --version" in the packaging transcript.

    (d) Update pip with "sudo pip install --upgrade pip".
        Record the output of "pip --version" in the packaging transcript.

    (e) Update py.test with "sudo pip install --upgrade pytest".
        Record the output "py.test --version" in the packaging transcript.

    (f) Update Sphinx with "sudo pip install --upgrade Sphinx".
        Record the output of "sphinx-build --version" in the packaging transcript.

    (g) Update LilyPond.
        Record the output of "lilypond --version" in the packaging transcript.

    (h) Update ImageMagick.
        Record the output of "convert --version" in the packaging transcript.
    
    (i) Update Graphiz. Go to www.graphviz.org.
        Record the output of "dot -V" in the packaging transcript.

 3. Author release notes:
        Open docs/source/start_here/versions/index.rst.
        Add a sentence giving the release date and repository revision number.
        Example: "Released 2009-05-21. Built from r5752."
        Run "ajv count tools ." and "scr/devel/count-source-lines".
        Add a sentence detailing the output of these scripts to this chapter.
        Example: "Implements 405 public classes and 1066 functions totaling 182,000 lines of code."
        Run "svn log --revision 4083:4977 | less" (for example) and read output in chronological order.
        Read log and write release notes.
        Follow the pattern already established in the document.
        List new features and functionality.
        Highlight significant new functionality with a musical example.
        Begin entries with an active verb in the simple past.
        Order entries by leading verb.
        List adds first and extensions second.
        List changes in user syntax last.
    Also update change log:
        Open docs/source/appendices/change_log/index.rst 
        Add entries for function, method and class names changed during development.
    Commit.

 4. Run the following codebase maintenance scripts on the mainline:
        find-nonalphabetized-class-method-names
        fix-test-cases
        find-and-fix-manual-class-package-initializers
            (change packge_root_name='experimental' manually before running against experimental)
        find-duplicate-modules-names
        find-import-as-statements
        find-import-from-stdlib-statements
        find-lower-camel-case-definitions
        find-lower-camel-case-modules
        find-manual-class-loads-in-initializers
        find-misnamed-private-modules
        fix-test-case-block-comments
        remove-source-file-terminal-blank-lines
        replace-abjad-prompts-with-python-prompts
        find-nonalphabetized-class-attributes
        find-undocumented-tools
        find-public-helpers-without-docstrings
        find-slots-implementation-inconsistencies
        reindent-3-spaces-as-4 (this will cause all 1500 pages of the docs to rebuild)
    Port these forward to new conventions and then start using as part of regular maintenance:
        find-nonalphabetized-module-headers
        fix-nonalphabetized-module-headers
    Finish this for the first time and then start using as part of regular maintenance:
        find-noninstantiable-concrete-classes
    We're not adhering to these at the moment though we might like to in future:
        find-multifunction-modules
    These are no longer the standard but might as well be kept around just in case:
        find-missing-test-modules
            (we can run this before builds but we don't really care about the output)
        find-multiline-import-statements (coding standards now allow multiline import statements)
    Test and commit. Alternately you may want to test after each script runs.
    Then run the matinenance scripts on the experimental branch.
    Then test and commit.

 5. Change to the abjad root directory, then to ly/ly and run `make all`.
    This will update the parser's LilyPond environment scrape to the current
    version of LilyPond in use in the packaging environment.
    If any part of the scrape fails to compile, fix, commit and repeat this
    step.

 6. Change to the abjad mainline root directory.
    Run "ajv clean .".
    Then run "py.test".
    If any tests break, fix, commit and repeat this step.
    Record mainline py.test test results in the packaging transcript.

 7. Change back to the abjad root directory and run "ajv api -M".
    You will need Graphviz installed to build the API.
    OS X Graphviz downloads are available at http://www.graphviz.org/Download..php.
    Ubuntu Graphic installation is available with "sudo apt-get install graphviz".
    The HTML version of the API should build with no warnings and no errors.
    If Sphinx gives any warnings or errors, fix, commit and go back to (6.)

 8. Change to abjad/tools.
    Run "ajv doctest".
    If any tests break, fix, commit and go back to (6.).
    Record mainline doctest test results in the packaging transcript.

 9. Change to the experimental directory.
    Run "ajv clean .".
    Then run "py.test".
    If any tests break, fix, commit and go back to (6.).
    Record experimental py.test results in the packaging transcript.

10. Stay in the experimental directory.
    Run "ajv doctest".
    If any tests break, fix, commit and go back to (6.).
    Record experimental doctest test results in the packaging transcript.

11. Return to the mainline.
    Start the Abjad interpreter to run one final sanity check.
    Run 'show(Note("c4"))'.
    Then call iotools.ly(), iotools.log(), iotools.pdf() and iotools.redo().
    Then run 'play(Note("c4"))'.
    If any test fails, fix, commit and go back to (6.)
    Record sanity check test results in the packaging transcript.

12. Change to the abjad/etc/optimization directory.
    Create a v2.x optimization transcript by copying the most recent such file.
    Record memory usage and profiling test results in the optimization transcript.

13. Run "svn info".
    Note the current revision of the working copy you are packaging.
    Open docs/source/start_here/versions/index.rst again.
    Check the release date indicated there.
    Check the revision number indicated there.
    Make sure the revision number equals current revision + 1.

14. Change to abjad/docs.
    Run 'make clean'.
    This step is important because failing to 'make clean' before building
    the docs can cause the doc tarball made below to be too large.

15. Change to experimental/docs.
    Run "make clean".
    Run "avj api -X". If any erros occur, fix, commit and go back to (6.)
    Record experimental HTML build results in the packaging transcript.

16. Change back to abjad/docs.
    Run "ajv api -M". If any errors occur, fix, commit and go back to (6.)
    Record mainline HTML build results in the packaging transcript.

17. Run "make latex". 
    If any errors occur, fix, commit and go back to (6.)
    Record LaTeX build results in the packaging transcript.

18. Run "make latexpdf". 
    If any errors occur, fix, commit and go back to (6.)
    Open the docs/build/latex/Abjad.pdf file that results.
    Click around some to make sure everything looks OK.
    Record Abjad.pdf build results in the packaging transcript.
    Open the docs/build/latex/AbjadAPI.pdf file that also results.
    Click around some to make sure everything looks OK.
    Record AbjadAPI.pdf build results in the packaging transcript.

19. Copy docs/build/latex/Abjad.pdf to docs/pdf/Abjad-x-y.pdf.
    Copy docs/build/latex/AbjadAPI.pdf to docs/pdf/AbjadAPI-x-y.pdf.
    Do both of these with 'cp' and not with 'svn cp'.

20. Add docs/pdf/Abajd-x-y.pdf to svn.
    Add docs/pdf/AbjadAPI-x-y.pdf to svn.

21. Remove docs/pdf/Abjad-x-(y-1).pdf from svn.
    Remove docs/pdf/AbjadAPI-x-(y-1).pdf from svn.

22. Commit.
    All tests have now passed in the packaging environment.
    All documentation has now built in the packaging environment.

23. For each additional test environment, repeat the following steps:
    [2] documenting the test environment.
    [5], [6], [7] recording py.test, doctest and sanity check test results.
    [12], [13], [14] recording HTML, LaTeX & PDF build results.

24. Complete all addition platform testing.
    Close and save the packaging transcript.
    Commit.

25. Change to abjad/trunk.
    Upgrade setuptools with "sudo pip install --upgrade setuptools".

26. Open setup.py and increment the version string found there.

27. Run 'python setup.py register sdist upload'
    Follow the login instructions provided by PyPI.
    You must have Abjad package owner credentials for this step to work.
    If you need Abjad package owner credentials, talk to Trevor, Josiah or Víctor.
    PyPI should respond with "Server response (200): OK".

28. Remove 'dist' and 'Abjad.egg-info'.
    The directories are no longer needed after upload to PyPI.
    The directories should not be checked into the Abjad repository.

29. Log in to The PyPI website at pypi.python.org with Abjad owner credentials.
    Talk to Trevor, Josiah or Víctor if you need Abjad owner credentials.
    Click on the Abjad link to edit PyPI's information about the package.

30. Click your browser's "back" button to return to the "Package 'Abjad' Editing" page.
    Then click on the "edit" link to the left of the entry for the new x.y version.
    This will take you to the "Submitting package information" page.

31. Manually restore the diacritics in "Víctor Adán" and "Trevor Bača" in the "Author" field.
    (This is necessary because there's a bug in setup.py that fails on UNICODE metadata.
    So UNICODE characters must be added back in by hand on this page of the PyPI website
    rather than being more conveniently read from abjad/trunk/setup.py.)
    ("Josiah Wolf Oberholtzer" transmits fine here and doesn't have to be tweaked.)

32. Manually restore the spaces after each of the keyword phrases in
    "music composition, music notation, formalized score control, lilypond"
    in the "Keywords" field. (Again, setup.py mangles these on upload to PyPI.)

33. Click the "Add information" button at the bottom of the page to confirm.
    All PyPI editing and uploading is now complete.

34. Click around PyPI to make sure everything looks correct.
    Then leave PyPI.
    
35. Edit abjad/__init__.py and increment '__version__' to the *next* minor number.

36. Edit tools/configurationtools/get_abjad_version_string.py and change the
    version number string given in the docstring.

37. Commit.

38. Author release announcement and mail to abjad-user@googlegroups.com.
    Release announcement should recapitulate version history.
    
[2011-08-21, 2011-08-30, 2011-09-12, 2011-09-22, 
 2012-01-29, 2012-02-27, 2012-05-22, 2012-06-05, 2012-10-03, 2012-10-05,
 2012-10-29, 2012-12-17, 2012-03-25]

### The following steps are no longer necessary as we are now hosting our own docs ###

29. Change to docs/build/html and archive all 17 or 18 files and subdirectories therein.
    You must create a single archive of all 17 or 18 files.
    Through the Finder on the Mac you can shift-click all 17 or 18 files,
    then control-click the selected files and choose "Compress 17 items"
    from the context menu that appears.
    (Note that archiving just the docs/build/html folder will not work.)
    Name the archive Archive.zip.
    Check the size of the archive.
    The archive must be less than 25 megs.
