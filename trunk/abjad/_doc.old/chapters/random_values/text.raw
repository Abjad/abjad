<h1>Random values generation</h1>

<subsection>

<p>
You can use Abjad to generate random values.
This is made particularly easy because of the availability of the Python <code>random</code> module.
</p>

<p>
Type <code>import random</code> at the prompt.
</p>

<abjad>
   abjad> import random
</abjad>

<p>
Use <code>dir( )</code> to inspect the contents of <code>random</code>.
</p>

<abjad>
   abjad> dir(random)
   ['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', 'WichmannHill', 
   '_BuiltinMethodType', '_MethodType', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '_acos', 
   '_ceil', '_cos', '_e', '_exp', '_hexlify', '_inst', '_log', '_pi', '_random', '_sin', '_sqrt', '_test', 
   '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'expovariate', 'gammavariate', 'gauss', 
   'getrandbits', 'getstate', 'jumpahead', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 
   'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'uniform', 'vonmisesvariate', 'weibullvariate']
</abjad>

</subsection>

<comments>

<p>
Excellent example of why Abjad extends Python.
Abjad blocks none of the built-in functionality of Python.
Much of the built-in functionality of Python is useful in an ISE-based approach to notation generation.
</p>

</comments>
