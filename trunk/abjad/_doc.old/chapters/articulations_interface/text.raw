<h1>The Abjad <_ArticulationsInterface> class</h1>

<subsection>

<p>
The Abjad <_ArticulationsInterface> class manages note, rest and chord articulations.
</p>

</subsection>

<interface>
<attributes>
   <inherited> first
   <inherited> last
   <inherited> only
   <inherited> spanned
   <inherited> spanner
   <inherited> spanners
</attributes>
<methods>
   <local> append
   <inherited> clear
   <inherited> copy
   <local> extend
   <local> insert
   <local> pop
   <local> remove
   <local> sort
   <inherited> unspan
</methods>
<overloads>
   <local> __contains__
   <local> __len__
   <local> __getitem__
</overloads>
</interface>

<section>Attributes

<subsection>

<p>
Abjad <Note>, <Rest>, <Chord> and <Skip> can have articulations.
Articulations are managed through the <_ArticulationsInterface>.
</p>

<abjad>
   abjad> note = Note(0, (1, 4))
   abjad> note.articulations
   Articulations( )
</abjad>

<p>
Articulations can be set directly as a list of articulation descriptors.
These descriptors can be either a single Python string giving the type of articulation (e.g. <code>'tenuto'</code>, <code>'marcato'</code>, etc.), 
</p>

<abjad>
   abjad> note = Note(0, (1, 4))
   abjad> note.articulations = ['marcato', 'tenuto']
   abjad> note.articulations
   Articulations(-\marcato, -\tenuto)
   hide> show(note)
</abjad>

<p>
or a pair of strings of the form <code>('type', 'placement')</code>, where <code>'type'</code> gives the articulation type, as above, and <code>'placement'</code> indicates its placement relative to the note.  
</p>

<abjad>
   abjad> note = Note(0, (1, 4))
   abjad> note.articulations = [('marcato', 'up'), ('tenuto', 'down')]
   abjad> note.articulations
   Articulations(^\marcato, _\tenuto)
   hide> show(note)
</abjad>

<p>
Valid strings for placement indication are 
<code>'up'</code>, 
<code>'down'</code>, 
<code>'default'</code> and their respective shortcuts
<code>'^'</code>, 
<code>'_'</code>  and
<code>'-'</code>. 
</p>

<p>
All articulations can we removed by assigning <code>None</code> to the articulations interface.
</p>

<abjad>
   abjad> note = Note(0, (1, 4))
   abjad> note.articulations = None
   abjad> note.articulations
   Articulations( )
</abjad>

<p>
The articulations interface behaves like a Python list, so it implements the following methods: 
</p>

<ul>
   <li><code>append( )</code></li>
   <li><code>extend( )</code></li>
   <li><code>remove( )</code></li>
   <li><code>pop( )</code></li>
   <li><code>insert( )</code></li>
   <li><code>sort( )</code></li>
</ul>

<p>
All work as you would expect. 
</p>

</subsection>

<comments>

<p>
Do we need to describe every list-like method here? Seems like we shouldn't. <i>Nope. Listing the methods here works great.</i>
</p>

</comments>
