<h1>The Abjad <_Leaf> class</h1>

<subsection>

<p>
The Abjad <_Leaf> class models the functionality that all notes, rests, chords and skips share.
</p>

</subsection>

<interface>
<attributes>
   <inherited> accidentals
   <local> articulations
   <inherited> barline
   <local> beam
   <local> clef
   <local> dots
   <local> duration
   <local> dynamics
   <inherited> format
   <local> formatter
   <local> glissando
   <local> grace
   <local> harmonic
   <local> leaves
   <local> next
   <local> number
   <local> offset
   <local> prev
   <local> spanners
   <local> staff
   <local> stem
   <inherited> tempo
   <local> tie
   <local> tremolo
   <local> trill
</attributes>
<methods>
   <inherited> copy
   <inherited> kind
</methods>
<overloads>
   <local> __init__
   <inherited> __mul__
   <inherited> __rmul__
</overloads>
</interface>

<section>Attributes

<subsection>

<p>
The Abjad <_Leaf> class is an abstract class and is not meant to be instantiated by hand.
</p>

<p>
But we show examples of <_Leaf> attributes here using note, rest and chords as concrete examples of the <_Leaf> class.
</p>

</subsection>

<definition>
<header>
   <inherited> accidentals
  	<p>NOT IMPLEMENTED.</p>
</header>
</definition>

<definition>
<header>
   <local> articulations
	<p>Read / write attribute defined here.</p>
	<p>Returns Abjad <_ArticulationsInterface>.</p>
	<p>Accepts Python list or Python tuple of zero or more LilyPond articulation strings, <code>None</code>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   abjad> note.articulations = ['staccato']
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <inherited> barline
	<p>Read / write attribute inherited from <_Component>.</p>
	<p>Returns Abjad <_BarlineInterface>.</p>
	<p>Accepts LilyPond barline string, <code>None</code>.</p>
	<p>See <a href="../component_class/index.html#barline">example</a>.</p>
</header>
</definition>

<definition>
<header>
   <local> beam
	<p>Read-only attribute defined here.</p>
	<p>Returns Abjad <_BeamInterface>.</p>
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   abjad> chord.beam
   _BeamInterface
</abjad>
</body>
</definition>

<definition>
<header>
   <local> clef
	<p>Read / write attribute defined here.</p>
	<p>Returns Abjad <_ClefInterface>.</p>
	<p>Accepts LilyPond clef string, Abjad <_Clef> instance, <code>None</code>.</p>
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chord.clef = 'alto'
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> dots
	<p>Read-only attribute defined here.</p>
	<p>Returns Abjad <_DotsInterface>.</p>
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chord.dots
   _DotsInterface
</abjad>
</body>
</definition>

<definition>
<header>
   <local> duration
	<p>Read / write attribute defined here.</p>
	<p>Returns Abjad <_LeafDurationInterface>.</p>
	<p>Accepts <a href="../duration_token/index.html">duration token</a>.</p>
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chord.duration.written = Rational(3, 8)
   hide> measure = Measure((3, 8), [chord])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> dynamics
	<p>Read / write attribute defined here.</p>
	<p>Returns Abjad <_DynamicsInterface>.</p>
	<p>Accepts LilyPond dynamics string, <code>None</code>.</p>
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   abjad> chord.dynamics = 'f'
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <inherited> format
	<p>Read-only attribute inherited from <_Component>.</p>
	<p>Returns LilyPond input string.</p>
	<p>See <a href="../component_class/index.html#format">example</a>.</p>
</header>
</definition>

<definition>
<header>
   <local> formatter
	<p>Read-only attribute defined here.</p>
	<p>Returns Abjad <code>_LeafFormatter</code>.</p>
</header>
<body>
<abjad>
   abjad> chord = Chord([0, 2, 10], (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   abjad> chord.formatter
   _ChordFormatter
</abjad>
</body>
</definition>

<definition>
<header>
   <local> glissando
	<p>Read / write attribute defined here.</p>
	<p>Returns Abjad <_GlissandoInterface>.</p>
	<p>Accepts <code>True</code>, <code>False</code>.</p>
</header>
<body>
<abjad>
   abjad> notes = [Note(0, (1, 4)), Note(2, (1, 4))]
   hide> measure = Measure((2, 4), notes)
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> notes = [Note(0, (1, 4)), Note(2, (1, 4))]
   hide> measure = Measure((2, 4), notes)
   hide> measure.meter.transparent = True
   abjad> notes[0].glissando = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> grace
	<p>Read-only attribute defined here.</p>
	<p>Returns Abjad <_GraceInterface>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.grace.before.append(Note(2, (1, 16)))
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> harmonic
	<p>Read / write attribute defined here.</p>
	<p>Returns Abjad <_HarmonicInterface>.</p>
	<p>Accepts <code>True</code>, <code>False</code>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.harmonic = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> leaves
	<p>Read-only attribute defined here.</p>
	<p>Returns one-element Python list comprising only <code>self</code>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.leaves
   [Note(c', 4)]
</abjad>
</body>
</definition>

<definition>
<header>
   <local> next
	<p>Read-only attribute defined here.</p>
	<p>Returns reference to next-leaf-in-container after <code>self</code>.</p>
</header>
<body>
<abjad>
   abjad> note1 = Note(-1, (1, 4))
   abjad> chord = Chord([0, 2, 10], (1, 4))
   abjad> note2 = Note(9, (1, 4))
   abjad> measure = Measure((1, 4), [note1, chord, note2])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note1 = Note(-1, (1, 4))
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> note2 = Note(9, (1, 4))
   hide> measure = Measure((1, 4), [note1, chord, note2])
   hide> measure.meter.transparent = True
   abjad> chord.next
   Note(a', 4)
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> number
	<p>Read-only attribute defined here.</p>
	<p>Returns zero-indexed integer representing the in-container position of chord.</p>
</header>
<body>
<abjad>
   abjad> measure = Measure((4, 4), [Note(x, (1, 8)) for x in range(8, 0, -1)])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> measure = Measure((4, 4), [Note(x, (1, 8)) for x in range(8, 0, -1)])
   hide> measure.meter.transparent = True
   abjad> measure[6].number
   6
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> offset
	<p>Read-only attribute defined here.</p>
	<p>Returns Abjad <code>Rational</code> representing the amount of in-container musical time prior to the start of <code>self</code>.</p>
</header>
<body>
<abjad>
   abjad> measure = Measure((4, 4), [Note(x, (1, 8)) for x in range(8, 0, -1)])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> measure = Measure((4, 4), [Note(x, (1, 8)) for x in range(8, 0, -1)])
   hide> measure.meter.transparent = True
   abjad> measure[6].offset
   Rational(3, 4)
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> prev
	<p>Read-only attribute defined here.</p>
	<p>Returns reference to prev-leaf-in-container after <code>self</code>.</p>
</header>
<body>
<abjad>
   abjad> note1 = Note(-1, (1, 4))
   abjad> chord = Chord([0, 2, 10], (1, 4))
   abjad> note2 = Note(9, (1, 4))
   abjad> measure = Measure((1, 4), [note1, chord, note2])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note1 = Note(-1, (1, 4))
   hide> chord = Chord([0, 2, 10], (1, 4))
   hide> note2 = Note(9, (1, 4))
   hide> measure = Measure((1, 4), [note1, chord, note2])
   hide> measure.meter.transparent = True
   abjad> chord.prev
   Note(b, 4)
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> spanner
	<p>Read-only attribute defined here.</p>
	<p>(Actually, the <code>spanners</code> attribute can be overwritten by the user. But don't do this.)</p>
	<p>Returns Abjad <_LeafSpannerInterface>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.spanners
   _LeafSpannerInterface
</abjad>
</body>
</definition>

<definition>
<header>
   <local> staff
	<p>Read / write attribute defined here.</p>
	<p>Returns reference to the Abjad <_Staff>.</p>
	<p>Accepts reference to Abjad <_Staff>.</p>
	<p>Use for setting cross-staff notes, chords, rests.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.staff is None
   True
</abjad>
</body>
</definition>

<definition>
<header>
   <local> stem
	<p>Read-only attribute defined here.</p>
	<p>Returns Abjad <_StemInterface>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [chord])
   hide> measure.meter.transparent = True
   abjad> note.stem
   _StemInterface
</abjad>
</body>
</definition>

<definition>
<header>
   <inherited> tempo
	<p>Read-only attribute inherited from <_Component>.</p>
	<p>Returns Abjad <_TempoInterface>.</p>
	<p>See <a href="../component_class/index.html#tempo">example</a>.</p>
</header>
</definition>

<definition>
<header>
   <local> tie
	<p>Read / write attribute defined here.</p>
	<p>Returns Abjad <_TieInterface>.</p>
	<p>Accepts <code>True</code>, <code>False</code>.</p>
</header>
<body>
<abjad>
   abjad> notes = Note(0, (1, 4)) * 2
   hide> measure = Measure((2, 4), notes)
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> notes = Note(0, (1, 4)) * 2
   hide> measure = Measure((2, 4), notes)
   hide> measure.meter.transparent = True
   abjad> notes[0].tie = True
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> tremolo
	<p>Read-only attribute defined here.</p>
	<p>Returns Abjad <_TremoloInterface>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.tremolo.subdivision = 32
   hide> show(measure)
</abjad>
</body>
</definition>

<definition>
<header>
   <local> trill
	<p>Read-only attribute defined here.</p>
	<p>Returns Abjad <_TrillInterface>.</p>
</header>
<body>
<abjad>
   abjad> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
</abjad>
<abjad>
   hide> note = Note(0, (1, 4))
   hide> measure = Measure((1, 4), [note])
   hide> measure.meter.transparent = True
   abjad> note.trill
   _TrillInterface
</abjad>
</body>
</definition>

<section>Methods

<definition>
<header>
   <inherited> copy
   <p>copy( )</p>
	<p>Bound method inherited from <_Component>.</p>
	<p>Returns a new copy of <code>self</code>.</p>
	<p>Accepts no input parameters.</p>
	<p>See <a href="../component_class/index.html#copy">example</a>.</p>
</header>
</definition>

<definition>
<header>
   <inherited> kind
   <p>kind(<i>classname</i>)</p>
	<p>Bound method inherited from <_Component></p>
	<p>Return <code>True</code> if <code>classname</code> in class hierarchy of <code>self</code>, and <code>False</code> otherwise.</p>
	<p>DEPRECATED. Use <code>isinstance</code> instead.</p>
	<p>See <a href="../component_class/index.html#kind">example</a>.</p>
</header>
</definition>

<section>Overloads

<definition>
<header>
   <local> __init__
   <p>__init__(<i>duration</i>)</p>
	<p>Special method defined here.</p>
	<p>Abjad <_Leaf> class is not meant to be instantiated by hand.</p>
</header>
</definition>

<definition>
<header>
   <inherited> __mul__
   <p>__mul__(<i>n</i>)</p>
	<p>Special method inherited from <_Component>.</p>
	<p>Implements left-handed multiplication against <code>self</code>.</p>
	<p>Returns Python list of <code>n</code> copies of <code>self</code>.</p>
	<p>See <a href="../component_class/index.html#mul">example</a>.</p>
</header>
</definition>

<definition>
<header>
   <inherited> __rmul__
   <p>__rmul__(<i>n</i>)</p>
	<p>Special method inherited from <_Component>.</p>
	<p>Implements right-handed multiplication against <code>self</code>.</p>
	<p>Returns Python list of <code>n</code> copies of <code>self</code>.</p>
	<p>See <a href="../component_class/index.html#rmul">example</a>.</p>
</header>
</definition>

<comments>

<p>
See the <_Leaf> class in <code>leaf/leaf.py</code> for implementation details.
</p>

</comments>

<to-do>

<p>
Should <code>accidentals</code> promote to a full interface?
</p>

<p>
Clean up the way <code>staff</code> works; is it a full interface or not?
</p>

<p>
Should we move <code>formatter</code> out of the 'interfaces' section?
</p>

</to-do>
