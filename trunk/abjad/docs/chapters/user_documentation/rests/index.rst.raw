Rests
=====

Making rests from strings
-------------------------

You can make rests from a string:

<abjad>
rest = Rest('r8')
</abjad>

<abjad>
show(rest)
measure = measuretools.AnonymousMeasure([rest]) <hide
iotools.write_expr_to_ly(measure, 'example-1', 'oedo.ly') <hide
</abjad>

Making rests from durations
---------------------------

You can also make rests from a duration:

<abjad>
rest = Rest(Duration(1, 4))
</abjad>

<abjad>
show(rest)
measure = measuretools.AnonymousMeasure([rest]) <hide
iotools.write_expr_to_ly(measure, 'example-2', 'oedo.ly') <hide
</abjad>

(You can even use ``Rest((1, 8))`` to make rests from a duration pair.)

Getting the duration attributes of rests
----------------------------------------

Get the written duration of rests like this:

<abjad>
rest.duration.written
print repr(rest.duration.written) <hide
</abjad>

Which is usually the same as preprolated duration:

<abjad>
rest.duration.preprolated
print repr(rest.duration.preprolated) <hide
</abjad>

And prolated duration:

<abjad>
rest.duration.prolated
print repr(rest.duration.prolated) <hide
</abjad>

Except for rests inside a tuplet:

<abjad>
tuplet = Tuplet((2, 3), [Note("c'4"), Rest('r4'), Note("e'4")])
</abjad>

<abjad>
show(tuplet)
measure = measuretools.AnonymousMeasure([tuplet]) <hide
iotools.write_expr_to_ly(measure, 'example-3', 'oedo.ly') <hide
</abjad>

<abjad>
rest = tuplet[1]
</abjad>

Tupletted rests carry written duration:

<abjad>
rest.duration.written
print repr(rest.duration.written) <hide
</abjad>

Prolation:

<abjad>
rest.duration.prolation
print repr(rest.duration.prolation) <hide
</abjad>

And prolated duration that is the product of the two:

<abjad>
rest.duration.prolated
print repr(rest.duration.prolated) <hide
</abjad>

Changing the written duration of rests
--------------------------------------

You can change the written duration of notes and rests:

<abjad>
tuplet[0].duration.written = Duration(1, 8)
tuplet[1].duration.written = Duration(1, 8)
tuplet[2].duration.written = Duration(1, 8)
spannertools.BeamSpanner(tuplet) <hide
</abjad>

<abjad>
show(tuplet)
iotools.write_expr_to_ly(measure, 'example-4', 'oedo.ly') <hide
</abjad>

Other duration attributes are read-only.
