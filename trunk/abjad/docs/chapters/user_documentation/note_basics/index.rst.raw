Working with notes
==================

Creating notes
--------------

Create notes with a name:

<abjad>
note = Note("c'4")
measure = measuretools.AnonymousMeasure([note]) <hide
iotools.write_expr_to_ly(measure, 'example-1', 'oedo.ly') <hide
</abjad>

Or with numbers:

<abjad>
note = Note(0, Fraction(1, 4))
measure = measuretools.AnonymousMeasure([note]) <hide
iotools.write_expr_to_ly(measure, 'example-2', 'oedo.ly') <hide
</abjad>

Changing pitch
--------------

Change pitch with a name:

<abjad>
note.pitch = "d'"
iotools.write_expr_to_ly(measure, 'example-3', 'oedo.ly') <hide
</abjad>

With a pair:

<abjad>
note.pitch = ('e', 4)
iotools.write_expr_to_ly(measure, 'example-4', 'oedo.ly') <hide
</abjad>

With a number:

<abjad>
note.pitch = 5
iotools.write_expr_to_ly(measure, 'example-5', 'oedo.ly') <hide
</abjad>

Or with a pitch object:

<abjad>
note.pitch = pitchtools.NamedChromaticPitch('g', 4)
iotools.write_expr_to_ly(measure, 'example-6', 'oedo.ly') <hide
</abjad>

Making pitch comparisons
------------------------

Compare one named chromatic pitch to another:

<abjad>
note.pitch
print repr(note.pitch) <hide
</abjad>

<abjad>
note.pitch == pitchtools.NamedChromaticPitch('c', 4)
print repr(note.pitch == pitchtools.NamedChromaticPitch('c', 4)) <hide
</abjad>

All six Python comparison operators work as expected.

<abjad>
note_1 = Note("c'4")
note_2 = Note("d'4")
</abjad>

<abjad>
note_1.pitch == note_2.pitch
print repr(note_1.pitch == note_2.pitch) <hide
</abjad>

<abjad>
note_1.pitch != note_2.pitch
print repr(note_1.pitch != note_2.pitch) <hide
</abjad>

<abjad>
note_1.pitch > note_2.pitch
print repr(note_1.pitch > note_2.pitch) <hide
</abjad>

<abjad>
note_1.pitch < note_2.pitch
print repr(note_1.pitch < note_2.pitch) <hide
</abjad>

<abjad>
note_1.pitch >= note_2.pitch
print repr(note_1.pitch >= note_2.pitch) <hide
</abjad>

<abjad>
note_1.pitch <= note_2.pitch
print repr(note_1.pitch <= note_2.pitch) <hide
</abjad>

Inspecting duration attributes
------------------------------

Leaves bundle six duration attributes.

<abjad>
tuplet = Tuplet((2, 3), macros.scale(3))
note = tuplet[0]
note.duration.multiplied
print repr(note.duration.multiplied) <hide
</abjad>

<abjad>
note.duration.multiplier
print repr(note.duration.multiplier) <hide
</abjad>

<abjad>
note.duration.preprolated
print repr(note.duration.preprolated) <hide
</abjad>

<abjad>
note.duration.prolated
print repr(note.duration.prolated) <hide
</abjad>

<abjad>
note.duration.prolation
print repr(note.duration.prolation) <hide
</abjad>

<abjad>
note.duration.written
print repr(note.duration.written) <hide
</abjad>

Reassigning duration attributes
-------------------------------

You can reassign written duration:

<abjad>
note = Note(0, (1, 4))
</abjad>

<abjad>
note.duration.written = Fraction(3, 16)
iotools.write_expr_to_ly(measure, 'example-7', 'oedo.ly') <hide
</abjad>

You can assign a LilyPond multiplier:

<abjad>
note = Note(0, (1, 4))
note.duration.multiplier = Fraction(1, 6)
</abjad>

<abjad>
note.duration.written
print repr(note.duration.written) <hide
note.duration.multiplier
print repr(note.duration.multiplier) <hide
note.duration.multiplied
print repr(note.duration.multiplied) <hide
</abjad>

All other duration attributes are read-only.

.. seealso:: 

   :doc:`Pitch conventions (appendix) </chapters/appendices/pitch_conventions/index>`
