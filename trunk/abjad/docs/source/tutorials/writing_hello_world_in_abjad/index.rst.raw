Writing "hello, world" in Abjad
===============================


The way you work with Abjad will develop as you learn more about the system.
This tutorial shows an easy way to start.


Checking installation
---------------------

Before we start we need to make sure Abjad is installed.

Open the terminal and start the Python interpreter::

    abjad$ python

::

    Python 2.7.3 (v2.7.3:70274d53c1dd, Apr  9 2012, 20:52:43) 
    [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    >>> 

Then use Python's ``import`` and ``from`` keywords to import Abjad::

    >>> from abjad import *

If Abjad is installed on your system then Python will silently load Abjad.
If Abjad isn't installed on your system then Python will raise
an import error.

Go to ``www.projectabjad.org`` and follow the instructions there
to install Abjad if necessary.


Writing "hello, world!"
-----------------------

After you've imported Abjad you can create a note like this:

<abjad>
note = Note("c'4")
</abjad>

And you can show the note like this:

<abjad>
show(note)
</abjad>


How it works
------------

How does Python suddenly know what musical notes are?
And how to make musical score?

Use Python's ``dir()`` built-in to get a sense of the answer::

    >>> dir()
    ['ABJCFG', 'Chord', 'Container', 'Duration', 'Fraction', 'Measure', 'Note', 'Rest', 'Score', 'Staff', 
    'Tuplet', 'Voice', '__builtins__', '__doc__', '__name__', '__package__', '__warningregistry__', 'abctools', 
    'abjadbooktools', 'beamtools', 'chordtools', 'componenttools', 'configurationtools', 'containertools', 
    'contexttools', 'datastructuretools', 'decoratortools', 'developerscripttools', 'documentationtools', 
    'durationtools', 'exceptiontools', 'f', 'formattools', 'gracetools', 'importtools', 'instrumenttools', 
    'introspectiontools', 'iotools', 'iterationtools', 'labeltools', 'layouttools', 'leaftools', 
    'lilypondfiletools', 'lilypondparsertools', 'lilypondproxytools', 'marktools', 'markuptools', 'mathtools', 
    'measuretools', 'notetools', 'offsettools', 'p', 'pitcharraytools', 'pitchtools', 'play', 'resttools', 
    'rhythmtreetools', 'schemetools', 'scoretemplatetools', 'scoretools', 'sequencetools', 'show', 'sievetools', 
    'skiptools', 'spannertools', 'stafftools', 'stringtools', 'tempotools', 'tietools', 'timeintervaltools', 
    'timesignaturetools', 'timetokentools', 'tonalitytools', 'tuplettools', 'verticalitytools', 'voicetools', 
    'wellformednesstools', 'z']

Calling ``from abjad import *`` causes Python to load hundreds or thousands of lines
of Abjad's code into the global namespace for you to use.
Abjad's code is organized into a collection of several dozen different score-related packages.
These packages comprise hundreds of classes that model things like notes and rests and
more than a thousand functions that let you do things like transpose music or change the way
beams look in your score.


Inspecting output
-----------------

Use ``dir()`` to take a look at the contents of the ``iotools`` package::

    >>> dir(iotools)
    ['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '_documentation_section', 
    'clear_terminal', 'f', 'get_last_output_file_name', 'get_next_output_file_name', 'importtools', 'log', 'ly', 
    'p', 'pdf', 'play', 'profile_expr', 'redo', 'save_last_ly_as', 'save_last_pdf_as', 'show', 
    'spawn_subprocess', 'write_expr_to_ly', 'write_expr_to_pdf', 'z']

The ``iotools`` package implements I/O functions that help you work with the files you create in Abjad.

Use ``iotools.ly()`` to see the last LilyPond input file created in Abjad::

    % Abjad revision 7636
    % 2012-10-09 13:32

    \version "2.17.3"
    \language "english"
    \include "/Users/trevorbaca/Documents/abjad/trunk/abjad/cfg/abjad.scm"

    \header {
        tagline = \markup {  }
    }

    \score {
        c'4
    }

Notice::

    1. Abjad inserts two lines of %-prefixed comments at the top of the LilyPond files it creates.
    2. Abjad includes version and language commands automatically.
    3. Abjad includes a special abjad.scm file resident somewhere on your computer.
    4. Abjad includes dummy LilyPond header. 
    5. Abjad includes a one-note score expression similar to the one you created in the last tutorial.

When you called ``show(note)`` Abjad created the LilyPond input file shown above.
Abjad then called LilyPond on that ``.ly`` file to create a PDF.

(Quit your text editor in the usual way to return to the Python interpreter.)

Now use ``iotools.log()`` to see the output LilyPond created as it ran::

    GNU LilyPond 2.17.3
    Processing `7721.ly'
    Parsing...
    Interpreting music...
    Preprocessing graphical objects...
    Finding the ideal number of pages...
    Fitting music on 1 page...
    Drawing systems...
    Layout output to `7721.ps'...
    Converting to `./7721.pdf'...
    Success: compilation successfully completed

This will look familiar from the previous tutorial where we created a LilyPond file by hand.

(Quit your text editor in the usual way to return to the Python interpreter.)


Stopping the interpreter
------------------------

Type ``quit()`` or ``ctrl+D`` when you're done.

    >>> ^D

The Python interpreter flushes the Abjad packages from memory and returns you to the terminal.

The example we created here shows how to work with Abjad at the command line::

    1. start the Python interpreter and import Abjad
    2. create musical objects in Abjad
    3. use show() to inspect your work
    4. repeat 2 - 3 as necessary

As you learn more about Abjad you'll work with file input more than with the Python interpreter.
But the Python interpreter provides an easy way to write "hello, world!" and start working with Abjad.
