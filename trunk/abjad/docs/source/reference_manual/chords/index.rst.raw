Chords
======

Making chords from a LilyPond input string
------------------------------------------

You can make chords from a LilyPond input string:

<abjad>
chord = Chord("<c' d' bf'>4")
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-1', docs=True) <hide
</abjad>

Making chords from chromatic pitch numbers and duration
-------------------------------------------------------

You can also make chords from chromatic pitch numbers and duration:

<abjad>
chord = Chord([0, 2, 10], Duration(1, 4))
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-2', docs=True) <hide
</abjad>

Getting all the written pitches of a chord at once
--------------------------------------------------

You can get all the written pitches of a chord at one time:

<abjad>
chord.written_pitches
print repr(chord.written_pitches) <hide
</abjad>

Abjad returns a read-only tuple of named chromatic pitches.

Getting the written pitches of a chord one at a time
----------------------------------------------------

You can get the written pitches of a chord one at a time:

<abjad>
chord.written_pitches[0]
print repr(chord.written_pitches[0]) <hide
</abjad>

Chords index the pitch they contain starting from ``0`` (just like tuples and lists).

Adding one pitch to a chord at a time
-------------------------------------

Use ``append()`` to add one note to a chord.

You can add a pitch to a chord with a chromatic pitch number:

<abjad>
chord.append(9)
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-3', docs=True) <hide
</abjad>

Or you can add a pitch to a chord with a chromatic pitch name:

<abjad>
chord.append("df''")
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-4', docs=True) <hide
</abjad>

Chords sort their pitches every time you add a new one.

This means you can add pitches to your chord in any order.

Adding many pitches to a chord at once
--------------------------------------

Use ``extend()`` to add many pitches to a chord.

You can use chromatic pitch numbers:

<abjad>
chord.extend([3, 4, 14])
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-5', docs=True) <hide
</abjad>

Or you can chromatic pitch names:

<abjad>
chord.extend(["g''", "af''"])
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-6', docs=True) <hide
</abjad>

Deleting pitches from a chord
-----------------------------

Delete pitches from a chord with ``del()``:

<abjad>
del(chord[0])
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-7', docs=True) <hide
</abjad>

<abjad>
del(chord[0])
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-8', docs=True) <hide
</abjad>

Negative indices work too:

<abjad>
del(chord[-1])
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-8', docs=True) <hide
</abjad>

Formatting chords
-----------------

Get the LilyPond input format of any Abjad object with ``format``:

<abjad>
chord.format
print chord.format <hide
</abjad>

Use ``f()`` as a short-cut to print the LilyPond input format of any Abjad object:

<abjad>
f(chord)
</abjad>

Working with note heads
-----------------------

Most of the time you will work with the pitches of a chord.
But you can get the note heads of a chord, too:

<abjad>
chord.note_heads
print repr(chord.note_heads) <hide
</abjad>

This is useful when you want to apply LilyPond overrides to note heads in a chord one at a time:

<abjad>
chord[2].tweak.color = 'red'
chord[3].tweak.color = 'blue'
chord[4].tweak.color = 'green'
</abjad>

<abjad>
f(chord)
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-9', docs=True) <hide
</abjad>


Working with empty chords
-------------------------

Abjad allows empty chords:

<abjad>
chord = Chord([], Duration(1, 4))
print repr(chord) <hide
</abjad>

Abjad formats empty chords, too:

<abjad>
f(chord)
</abjad>

But if you pass empty chords to ``show()`` LilyPond will complain
because empty chords don't constitute valid LilyPond input.

When you are done working with an empty chord you can add pitches back
into it chord in any of the ways described above:

<abjad>
chord.extend(["gf'", "df''", "g''"])
</abjad>

<abjad>
show(chord, docs=True)
measure = measuretools.AnonymousMeasure([chord]) <hide
iotools.write_expr_to_ly(measure, 'chords-10', docs=True) <hide
</abjad>
