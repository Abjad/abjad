import pytest
from abjad.pitch import (
    NamedInterval,
    NamedIntervalClass,
    NumberedInterval,
    NumberedIntervalClass,
)


values = []

values.extend((x, x, None) for x in range(-48, 49))

values.extend([
    ('-A1', -1, '-A1'),
    ('-A10', -17, '-A10'),
    ('-A11', -18, '-A11'),
    ('-A12', -20, '-A12'),
    ('-A13', -22, '-A13'),
    ('-A14', -24, '-A14'),
    ('-A2', -3, '-A2'),
    ('-A3', -5, '-A3'),
    ('-A4', -6, '-A4'),
    ('-A5', -8, '-A5'),
    ('-A6', -10, '-A6'),
    ('-A7', -12, '-A7'),
    ('-A8', -13, '-A8'),
    ('-A9', -15, '-A9'),
    ('-AA1', -2, '-AA1'),
    ('-AA10', -18, '-AA10'),
    ('-AA11', -19, '-AA11'),
    ('-AA12', -21, '-AA12'),
    ('-AA13', -23, '-AA13'),
    ('-AA14', -25, '-AA14'),
    ('-AA2', -4, '-AA2'),
    ('-AA3', -6, '-AA3'),
    ('-AA4', -7, '-AA4'),
    ('-AA5', -9, '-AA5'),
    ('-AA6', -11, '-AA6'),
    ('-AA7', -13, '-AA7'),
    ('-AA8', -14, '-AA8'),
    ('-AA9', -16, '-AA9'),
    ('-AAA1', -3, '-AAA1'),
    ('-AAA10', -19, '-AAA10'),
    ('-AAA11', -20, '-AAA11'),
    ('-AAA12', -22, '-AAA12'),
    ('-AAA13', -24, '-AAA13'),
    ('-AAA14', -26, '-AAA14'),
    ('-AAA2', -5, '-AAA2'),
    ('-AAA3', -7, '-AAA3'),
    ('-AAA4', -8, '-AAA4'),
    ('-AAA5', -10, '-AAA5'),
    ('-AAA6', -12, '-AAA6'),
    ('-AAA7', -14, '-AAA7'),
    ('-AAA8', -15, '-AAA8'),
    ('-AAA9', -17, '-AAA9'),
    ('-M10', -16, '-M10'),
    ('-M13', -21, '-M13'),
    ('-M2', -2, '-M2'),
    ('-M3', -4, '-M3'),
    ('-M6', -9, '-M6'),
    ('-M7', -11, '-M7'),
    ('-M9', -14, '-M9'),
    ('-P1', -0, 'P1'),
    ('-P11', -17, '-P11'),
    ('-P12', -19, '-P12'),
    ('-P15', -24, '-P15'),
    ('-P4', -5, '-P4'),
    ('-P5', -7, '-P5'),
    ('-P8', -12, '-P8'),
    ('-P8', -12, '-P8'),
    ('-d1', -1, '-d1'),
    ('-d10', -14, '-d10'),
    ('-d11', -16, '-d11'),
    ('-d12', -18, '-d12'),
    ('-d13', -19, '-d13'),
    ('-d14', -21, '-d14'),
    ('-d2', -0, '-d2'),
    ('-d3', -2, '-d3'),
    ('-d4', -4, '-d4'),
    ('-d5', -6, '-d5'),
    ('-d6', -7, '-d6'),
    ('-d7', -9, '-d7'),
    ('-d8', -11, '-d8'),
    ('-d9', -12, '-d9'),
    ('-dd1', -2, '-dd1'),
    ('-dd10', -13, '-dd10'),
    ('-dd11', -15, '-dd11'),
    ('-dd12', -17, '-dd12'),
    ('-dd13', -18, '-dd13'),
    ('-dd14', -20, '-dd14'),
    ('-dd2', 1, '-dd2'),
    ('-dd3', -1, '-dd3'),
    ('-dd4', -3, '-dd4'),
    ('-dd5', -5, '-dd5'),
    ('-dd6', -6, '-dd6'),
    ('-dd7', -8, '-dd7'),
    ('-dd8', -10, '-dd8'),
    ('-dd9', -11, '-dd9'),
    ('-ddd1', -3, '-ddd1'),
    ('-ddd10', -12, '-ddd10'),
    ('-ddd11', -14, '-ddd11'),
    ('-ddd12', -16, '-ddd12'),
    ('-ddd13', -17, '-ddd13'),
    ('-ddd14', -19, '-ddd14'),
    ('-ddd2', 2, '-ddd2'),
    ('-ddd3', 0, '-ddd3'),
    ('-ddd4', -2, '-ddd4'),
    ('-ddd5', -4, '-ddd5'),
    ('-ddd6', -5, '-ddd6'),
    ('-ddd7', -7, '-ddd7'),
    ('-ddd8', -9, '-ddd8'),
    ('-ddd9', -10, '-ddd9'),
    ('-m10', -15, '-m10'),
    ('-m13', -20, '-m13'),
    ('-m14', -22, '-m14'),
    ('-m2', -1, '-m2'),
    ('-m3', -3, '-m3'),
    ('-m6', -8, '-m6'),
    ('-m7', -10, '-m7'),
    ('-m9', -13, '-m9'),
    ('A1', 1, '+A1'),
    ('A10', 17, '+A10'),
    ('A11', 18, '+A11'),
    ('A12', 20, '+A12'),
    ('A13', 22, '+A13'),
    ('A14', 24, '+A14'),
    ('A2', 3, '+A2'),
    ('A3', 5, '+A3'),
    ('A4', 6, '+A4'),
    ('A5', 8, '+A5'),
    ('A6', 10, '+A6'),
    ('A7', 12, '+A7'),
    ('A8', 13, '+A8'),
    ('A9', 15, '+A9'),
    ('AA1', 2, '+AA1'),
    ('AA10', 18, '+AA10'),
    ('AA11', 19, '+AA11'),
    ('AA12', 21, '+AA12'),
    ('AA13', 23, '+AA13'),
    ('AA14', 25, '+AA14'),
    ('AA2', 4, '+AA2'),
    ('AA3', 6, '+AA3'),
    ('AA4', 7, '+AA4'),
    ('AA5', 9, '+AA5'),
    ('AA6', 11, '+AA6'),
    ('AA7', 13, '+AA7'),
    ('AA8', 14, '+AA8'),
    ('AA9', 16, '+AA9'),
    ('AAA1', 3, '+AAA1'),
    ('AAA10', 19, '+AAA10'),
    ('AAA11', 20, '+AAA11'),
    ('AAA12', 22, '+AAA12'),
    ('AAA13', 24, '+AAA13'),
    ('AAA14', 26, '+AAA14'),
    ('AAA2', 5, '+AAA2'),
    ('AAA3', 7, '+AAA3'),
    ('AAA4', 8, '+AAA4'),
    ('AAA5', 10, '+AAA5'),
    ('AAA6', 12, '+AAA6'),
    ('AAA7', 14, '+AAA7'),
    ('AAA8', 15, '+AAA8'),
    ('AAA9', 17, '+AAA9'),
    ('M10', 16, '+M10'),
    ('M13', 21, '+M13'),
    ('M14', 23, '+M14'),
    ('M2', 2, '+M2'),
    ('M3', 4, '+M3'),
    ('M6', 9, '+M6'),
    ('M7', 11, '+M7'),
    ('M9', 14, '+M9'),
    ('P1', 0, 'P1'),
    ('P11', 17, '+P11'),
    ('P12', 19, '+P12'),
    ('P15', 24, '+P15'),
    ('P4', 5, '+P4'),
    ('P5', 7, '+P5'),
    ('P8', 12, '+P8'),
    ('d1', 1, '+d1'),
    ('d10', 14, '+d10'),
    ('d11', 16, '+d11'),
    ('d12', 18, '+d12'),
    ('d13', 19, '+d13'),
    ('d14', 21, '+d14'),
    ('d2', 0, '+d2'),
    ('d3', 2, '+d3'),
    ('d4', 4, '+d4'),
    ('d5', 6, '+d5'),
    ('d6', 7, '+d6'),
    ('d7', 9, '+d7'),
    ('d8', 11, '+d8'),
    ('d9', 12, '+d9'),
    ('dd1', 2, '+dd1'),
    ('dd10', 13, '+dd10'),
    ('dd11', 15, '+dd11'),
    ('dd12', 17, '+dd12'),
    ('dd13', 18, '+dd13'),
    ('dd14', 20, '+dd14'),
    ('dd2', -1, '+dd2'),
    ('dd3', 1, '+dd3'),
    ('dd4', 3, '+dd4'),
    ('dd5', 5, '+dd5'),
    ('dd6', 6, '+dd6'),
    ('dd7', 8, '+dd7'),
    ('dd8', 10, '+dd8'),
    ('dd9', 11, '+dd9'),
    ('ddd1', 3, '+ddd1'),
    ('ddd10', 12, '+ddd10'),
    ('ddd11', 14, '+ddd11'),
    ('ddd12', 16, '+ddd12'),
    ('ddd13', 17, '+ddd13'),
    ('ddd14', 19, '+ddd14'),
    ('ddd2', -2, '+ddd2'),
    ('ddd3', 0, '+ddd3'),
    ('ddd4', 2, '+ddd4'),
    ('ddd5', 4, '+ddd5'),
    ('ddd6', 5, '+ddd6'),
    ('ddd7', 7, '+ddd7'),
    ('ddd8', 9, '+ddd8'),
    ('ddd9', 10, '+ddd9'),
    ('m10', 15, '+m10'),
    ('m13', 20, '+m13'),
    ('m14', 22, '+m14'),
    ('m2', 1, '+m2'),
    ('m3', 3, '+m3'),
    ('m6', 8, '+m6'),
    ('m7', 10, '+m7'),
    ('m9', 13, '+m9'),
    ])

values.extend([
    (('M', 1), ValueError, None),
    (('M', 4), ValueError, None),
    (('M', 5), ValueError, None),
    (('P', 2), ValueError, None),
    (('P', 3), ValueError, None),
    (('P', 6), ValueError, None),
    (('P', 7), ValueError, None),
    (('m', 1), ValueError, None),
    (('m', 4), ValueError, None),
    (('m', 5), ValueError, None),
    ])


@pytest.mark.parametrize('input_, semitones, name', values)
def test_01(input_, semitones, name):
    class_ = NamedInterval
    if (
        isinstance(semitones, type) and
        issubclass(semitones, Exception)
    ):
        with pytest.raises(semitones):
            class_(input_)
    else:
        instance = class_(input_)
        assert float(instance) == semitones
        if name is not None:
            assert instance.name == name
