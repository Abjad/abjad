1.  Sweep inline scoremanager TODO items.

2.  Make user input getter defaults work like menu defaults.
    Implement default value on user input getter.

3.  Fix IOManager.handle_user_input() default handling.

4.  Find a way dynamically to present default notice with default menu entries.

5.  Distinguish positional editor parameters from keyword editor parameters.

6.  Audit the UI of the entire materials management system by hand.

7.  Implement red_example_score.materials.divisions to import 
    red_example_score.materials.time_signatures.
    This will implement an intrapackage material import.

8.  Implement MaterialPackageWrangler method to a material package 
    from one location to another.

9.  Move score/instrumentation.py module to score/materials packages.
    Maybe easiest to do this by creating an
    InstrumentationSpecifierMaterialManager.

10. These four classes can all be collapsed into one:
        wizards.HandlerCreationWizard
        wizards.ArticulationHandlerCreationWizard
        wizards.DynamicHandlerCreationWizard
        wizards.RhythmMakerCreationWizard

11. Note that ArticulationHandlerMaterialManager implementation is limited
    to just a handful of class variables. See if the class can be eliminated
    by moving the variables to ArticulationHandler and by teaching
    MaterialPackageManager how to inspect ArticulationHandler class variables. 
    The will then be true for DynamicHandlerMaterialManager and a couple of 
    other material manager classes.

12. Implement an 'all whatever - edit' command.

13. Write view tests. Start with segment wrangler.

14. Make (ls) work in stylesheets menu. So (score > y > ls).

15. Add (lytr) for 'lilypond ly - trash'. This will work together
    with (lyrm) for 'lilypond ly - remove'. The difference will be
    that (lyrm) will (try to) act on the repository where (lytr) will
    only ever work on the filesystem.

16. Write py.test tests for the following properties and methods:
        Manager._repository_add_command
        Manager._repository_status_command
        Manager._get_added_asset_paths()
        Manager._get_unadded_asset_paths()
        Manager._get_repository_root_directory()
        Manager._is_up_to_date()

17. Add 'output module - check (omc)' command.
    The command will simply call Python on output.py and print
    anything returned by traceback.print_exc(). Should probably
    also return true on success and false on failure so the command
    can be mapped to many material packages at once and so that
    aggregated reporting can be given afterwards.
    It might make sense to have an 'illustration ly - check (lyc)' command.
    And in general verify commands for every system artifact that can
    be interpreted.

18. Make 'vmro' provide a message when no __views__ module is found.

19. Implement a 'views module - rewrite' (vmrw) command.

20. Implement DirectoryManager.check_contents().
    With corresponding 'check - contents' (cc) command.
    The method will list the contents of a directory, compare
    to a known list of acceptable files and globs, and display
    any foreign contents.

21. Encapsulate ...
        process = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            )
    ... in an IOManager method.

22. Do something to put an empty .gitignore file in every directory everywhere.
    Provide a user interface.
    
23. Eventually implement a Score Manager start-up behavior that will
    run and check the filesystem layout of all assets everywhere and
    prompt the composer to fix as required before composition begins.

24: Bug:
    File "/Users/trevorbaca/Documents/abjad/scoremanager/wranglers/Wrangler.py", 
    line 137, in _get_next_asset_path
        return paths[0]
    IndexError: list index out of range

25. Bug:
    File "/Users/trevorbaca/Documents/abjad/scoremanager/core/ScoreManager.py", line 212,
        in _get_next_score_directory_path
        index = paths.index(score_path)
    ValueError: '/Users/trevorbaca/Documents/scores/betoerung/materials/reiterated_forte' is not in list
    Command history: (bet m reit >>).
    Score navigation from within material packge triggers bug.

26. Implement an Editor method to allow an none-allowing attribute to be 
    (re)set to none.
    Example: change ...
        1: talea (t): Talea(counts=(1, 2, 3, 4), denominator=16)
        2: split divisions by counts (sdc):
        3: extra counts per division (xcd):
        4: beam specifier (bs):
        5: burnish specifier (rs):
        6: duration spelling specifier (dss):
        7: tie specifier (ts):
    ... to ...
        1: talea (t): Talea(counts=(1, 2, 3, 4), denominator=16)
        2: split divisions by counts (sdc):
        3: extra counts per division (xcd):
        4: beam specifier (bs): BeamSpecifier(beam_each_division=True, beam_divisions_together=False)
        5: burnish specifier (rs):
        6: duration spelling specifier (dss):
        7: tie specifier (ts):
    ... and then back to ...
        1: talea (t): Talea(counts=(1, 2, 3, 4), denominator=16)
        2: split divisions by counts (sdc):
        3: extra counts per division (xcd):
        4: beam specifier (bs):
        5: burnish specifier (rs):
        6: duration spelling specifier (dss):
        7: tie specifier (ts):
    ... using the editor.

27. Bug:
    (edit talea rhythm-maker > xcd > 2)
    function = lambda x: all(predicates.is_integer(y) for y in x)
    TypeError: 'int' object is not iterable
    The getter is checking for (a tuple or list of) integers;
    then the getter receives only a single integer the getter 
    should not explode.

28. Remove AttributeManifest._target_class after removing PerformerEditor and
    ListEditor.

29. Remove 'material_manager_class_name' key from all metadata modules.
    Do this after collapsing all material package manager classes.

30. Remove FileManager.extension class variables.
    Or else make into a properly documented property.