1.  Sweep inline scoremanager TODO items.

2.  Edit instrument transposition.

3.  Make user input getter defaults work like menu defaults.
    Implement default value on user input getter.

4.  Fix IOManager.handle_user_input() default handling.

5.  Find a way dynamically to present default notice with default menu entries.

6.  Distinguish positional editor parameters from keyword editor parameters.

7.  Audit the UI of the entire materials management system by hand.

8.  Implement red_example_score.materials.divisions to import 
    red_example_score.materials.time_signatures.
    This will implement an intrapackage material import.

9.  Implement MaterialPackageWrangler method to a material package 
    from one location to another.

10. Refactor scoremanager.editors to contain as few classes as possible.

11. Move score/instrumentation.py module to score/materials packages.
    Maybe easiest to do this by creating an
    InstrumentationSpecifierMaterialManager.

12. These four classes can all be collapsed into one:
        wizards.HandlerCreationWizard
        wizards.ArticulationHandlerCreationWizard
        wizards.DynamicHandlerCreationWizard
        wizards.RhythmMakerCreationWizard

13. Make sure that editing instrumentation doesn't change FrenchHorn to merely
    Instrument. Make sure that editing instrumentation doesn't reset
    sounding_pitch_of_written_middle_c to C4.

14. Note that ArticulationHandlerMaterialManager implementation is limited
    to just a handful of class variables. See if the class can be eliminated
    by moving the variables to ArticulationHandler and by teaching
    MaterialManager how to inspect ArticulationHandler class variables. The
    will then be true for DynamicHandlerMaterialManager and a couple of other
    material manager classes.

15. Implement an 'all whatever - edit' command.

16. Write view tests. Start with segment wrangler.

17. Remove user/score_manager_library/material_package_managers/ in 
    favor of user/score_manager_library/material_managers/

18. Change user/score_manager_library/material_packages/
    to user/score_manager_library/materials/.

19. Search for 'whatever_section = menu.make_*_section()' and
    change to 'section = menu.make_*_section()' everywhere.

20. Extend Manager._remove() to use 'trash' if command is found.

21. Make ScorePackageManager create missing top-level directories
    during initialization. Run tests before and after change to check
    for any noticeable slowdown.

22. Make (ls) work in stylesheets menu. So (score > y > ls).

23. Add (lytr) for 'lilypond ly - trash'. This will work together
    with (lyrm) for 'lilypond ly - remove'. The difference will be
    that (lyrm) will (try to) act on the repository where (lytr) will
    only ever work on the filesystem.

24. Write py.test tests for the following properties and methods:
        Manager._repository_add_command
        Manager._repository_status_command
        Manager._get_added_asset_paths()
        Manager._get_unadded_asset_paths()
        Manager._get_repository_root_directory()
        Manager._is_up_to_date()

24. Add 'output module - check (omc)' command.
    The command will simply call Python on output.py and print
    anything returned by traceback.print_exc(). Should probably
    also return true on success and false on failure so the command
    can be mapped to many material packages at once and so that
    aggregated reporting can be given afterwards.
    It might make sense to have an 'illustration ly - check (lyc)' command.
    And in general verify commands for every system artifact that can
    be interpreted.

25. Make 'vmro' provide a message when no __views__ module is found.

26. Implement a 'views module - rewrite' (vmrw) command.

27. Implement DirectoryManager.check_contents().
    With corresponding 'check - contents' (cc) command.
    The method will list the contents of a directory, compare
    to a known list of acceptable files and globs, and display
    any foreign contents.

28. Clean up possibly all current_* session variables by implementing
    as derived properties:
        current_score_directory_path
        current_score_package_manager
        current_score_snake_case_name
        last_asset_path
    Seems like all of these should be derivable simply by looking
    at the controller stack. This means that all of these variables
    can stop being maintained by other parts of the system.

29. Implement slots on wranglers.

30. Encapsulate ...
        process = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            )
    ... in an IOManager method.

31. Do something to put an empty .gitignore file in every directory everywhere.
    Provide a user interface.
    
32. Eventually implement a Score Manager start-up behavior that will
    run and check the filesystem layout of all assets everywhere and
    prompt the composer to fix as required before composition begins.

33. See if maybe clear=True keywords can be removed.