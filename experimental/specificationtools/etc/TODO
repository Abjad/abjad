1.  Author tests to make sure that persistent overlapping division selectors 
    can be overwritten in a subsequent segment.

2.  Integrate time-relation filtering into all inequality selector classes.
    Write test_SegmentSpecification__select_divisions_time_relation.py to test.
    Change 'inequality' to 'time_relation' globally.
    Finish timerelationtools class docstrings before 2.11 build.

3.  Notice that the SegmentSpecification.set_divisions() 'truncate' keyword means two things.
    It means truncate last division in section. It also means restart divisions at
    beginning of following section. Implement a SegmentSpecification.set_divisions()
    boolean 'restart' keyword to separate these functions. When restart=True
    then truncate will always effectively be interpreted as true.

4.  Extend OffsetPositionedRhythmExpression.rotate() with a new 'level=-1' keyword.
    The keyword will specify the score-tree level at which rotation should happen.
    The keyword will be an attribute of the RotationIndicator class.

5.  Implement SegmentSpecification.select_multiple_divisions() to return multiple
    selectors at once. This will change ...
        first_division = red_segment.select_division(0)
        second_division = red_segment.select_division(1)
        third_division = red_segment.select_division(2)
    ... into this ...
        first_division, second_division, third_division = red_segment.select_all_divisions()
    ... instead.

6.  Implement very basic cycle detection.

7.  Afford rhythm command request of parseable string. This will make ...
        red_segment.set_rhythm("c'32 [ c'16 c'16. ]", contexts=['Voice 1'])
        voice_1_rhythm_command = red_segment.request_rhythm_command('Voice 1')
        red_segment.set_rhythm(voice_1_rhythm_command, contexts=['Voice 2'])
    ... interpret correctly.
    Then make X5 work with rhythm command request instead of rhythm request.

8.  Set all rotation to fracture_spanners=False by default in interpreter.

9.  Reimplement rhythm rotation to pay attention to the differences beteween
    spanners that cover components and spanners that dominate components.
    Fill in missing spannertools docstrings before doing this.

10. Sprinkle asserts into all segment specification select methods.
    This will assert on red_segment.select_divisions('Voice 1') and similar.

11. Write D series schematic examples to (re)establish metrical hierarhcy at two different points.
    Establish metrical hierarchy after division specification and change divisions where necessary.
    Reestablish metrical hierarchy after rhythm specification but leave divisions in tact.

12. Write E series schematic examples to all focus on different uses of the metrical hierarchy.
    Set divisions equal to different levels of the metrical hierarchy (beat, next level down, etc.).
    Make selections equal to different levels of the metrical hierarchy.

13. Find a way to make beam_cells_together a rhythm-maker initializer keyword. 
    Right now it's added onto the side of already-initialized
    rhythm-makers in the rhythm library. Better to add to the rhythm-maker initializer signature.

14. Get rid of 'Filled' from rhythm-maker class names.
