1.  Notice that the SegmentSpecification.set_divisions() 'truncate' keyword means two things.
    It means truncate last division in section. It also means restart divisions at
    beginning of following section. Implement a SegmentSpecification.set_divisions()
    boolean 'restart' keyword to separate these functions. When restart=True
    then truncate will always effectively be interpreted as true.

2.  Implement some sort of "cake slice" management interface on SegmentSpecification and ScoreSpecification.
    Currently we must use ...
        timespan = red_segment.select_segment_offsets(Offset(3, 16), Offset(6, 16))
        rhythm = red_segment.select_leaves('Voice 1', timespan=timespan)
        blue_segment.set_rhythm(rhythm, contexts=['Voice 1'])
        rhythm = red_segment.select_leaves('Voice 2', timespan=timespan)
        blue_segment.set_rhythm(rhythm, contexts=['Voice 2'])
        rhythm = red_segment.select_leaves('Voice 3', timespan=timespan)
        blue_segment.set_rhythm(rhythm, contexts=['Voice 3'])
        rhythm = red_segment.select_leaves('Voice 4', timespan=timespan)
        blue_segment.set_rhythm(rhythm, contexts=['Voice 4'])
    ... when it might be possible to use ...
        timespan = red_segment.select_segment_offsets(Offset(3, 16), Offset(6, 16))
        selected_voices = ['Voice 1', 'Voice 2', 'Voice 3', 'Voice 4']
        rhythm = red_segment.select_leaves(selected_voices, timespan=timespan)
        blue_segment.set_rhythm(rhythm, contexts=selected_voices)
    ... instead.
    This will simplify the X9 composer interface.

3.  Unskip all experimental tests before 2.11 build.

4.  Author tests to make sure that persistent overlapping division select expressions
    can be overwritten in a subsequent segment.
    See test_multiple_segment_solo__persistent_overlapping_division_select_expressions_05().

5.  Looks like callback stacks may not be copied over from segment to segment for persistent set expressions.
    Fix test_multiple_segment_solo__persistent_overlapping_division_select_expressions_03() to debug.

6.  Finish timerelationtools class docstrings before 2.11 build.

7.  Finish timespantools package docstrings before 2.11 build.

8.  Add examples to the docstrings of all experimental class methods and properties before 2.11 build.

9.  Audit entire interpreter.
    Update variable names.
    Remove duplicate code.

10. Audit all expressions.
    Complete all expression docstrings.

11. Globally search and replace z(x) with z() of whole inventory.

12. Add some tests to show this:
        segments = score_specification.select_segments()['red':('blue'+1)]
        middle_part = segments.set_offset(start=(3, 4), stop=(-3, 4))
        score_specification.set_divisions([(1, 16)])
        middle_part.set_divisions([(3, 16)])
    This will show set expression divisions for (potentially) more than one segment.

13. Add some tests to show this:
        segments = score_specification.select_segments()['red':('blue'+1)]
        middle_measures = segments.select_measures('Voice 1')[3:6]
    This will show selecting measures from (potentially) more than one segment.

14. Extend interpreter to allow interpretation to procede absent segment specification.
    Right now a dummy segment is required to allow interpretation to procede.
    Score-rooted set expressions should suffice.

15. Move ScoreSpecification.division_region_expressions to VoiceProxy.division_region_expressions.
    Move ScoreSpecification.rhythm_region_expressions to VoiceProxy.rhythm_region_expressions.
