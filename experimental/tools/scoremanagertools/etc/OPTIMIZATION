Note that as of r9872 it takes only 181 function calls to initialize the score manager ...

    >>> iotools.profile_expr('score_manager = scoremanagertools.scoremanager.ScoreManager()')
    181 function calls in 0.000 seconds

... but that it takes 819,997 function calls to start and immediately quit the score manager
a first time and then significantly fewer function calls on successive tests:

    >>> iotools.profile_expr("score_manager._run(user_input='q')")
    819997 function calls (819894 primitive calls) in 0.734 seconds

    >>> iotools.profile_expr("score_manager._run(user_input='q')")
    241391 function calls in 0.220 seconds

    >>> iotools.profile_expr("score_manager._run(user_input='q')")
    241391 function calls in 0.220 seconds

CONCLUSION: don't know what's going on here but it's clear that the score manager takes
quite a few unnecessary steps on start-up. ScoreManager start up should be as simple
as listing the names of all scores in the system, possibly with the additional
work of inspecting each score package tag file for date of composition.
All of that should take far fewer than 820,000 function calls.
Optimizing score manager start up should save as much as 0.7 seconds on each
score manager-initiated test.

OBSERVATION: Note that the following ...

    def make_score_selection_menu(self):
        #menu, section = self._io.make_menu(where=self._where, is_numbered=True, is_keyed=False)
        menu, section = self._io.make_menu(where='foo', is_numbered=True, is_keyed=False)
        section.tokens = self.score_package_wrangler._make_visible_asset_menu_tokens()
        return menu

... reduces score manager start-up from 820,000 function calls to 153,000 function calls.
Removing the call to self._where removes the call to inspect.stack().
This was tricky to find because iotools.profile_expr('inspect.stack()') is lean.
The function must be called inside a complex stack to reveal its true cost.

CONCLUSION: Stack inspection can not be a mandatory part of menu creation
because stack inspection is expensive.


### r10247 ###

As of r10247 it takes 6,658 function calls to initialize the score manager ...

    >>> iotools.profile_expr('score_manager = scoremanagertools.scoremanager.ScoreManager()')
     6658 function calls (6646 primitive calls) in 0.008 seconds

   Ordered by: cumulative time
   List reduced from 147 to 12 due to restriction <12>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.008    0.008 <string>:1(<module>)
        1    0.000    0.000    0.008    0.008 ScoreManager.py:11(__init__)
        6    0.000    0.000    0.008    0.001 PackagesystemAssetWrangler.py:8(__init__)
        6    0.000    0.000    0.008    0.001 packagesystem_path_to_filesystem_path.py:4(packagesystem_path_to_filesystem_path)
        6    0.000    0.000    0.007    0.001 ScoreManagerConfiguration.py:22(__init__)
        6    0.000    0.000    0.007    0.001 Configuration.py:16(__init__)
        2    0.000    0.000    0.003    0.001 MaterialPackageMakerWrangler.py:12(__init__)
        1    0.000    0.000    0.003    0.003 MaterialPackageWrangler.py:37(__init__)
     12/6    0.000    0.000    0.002    0.000 configobj.py:1187(__init__)
     12/6    0.000    0.000    0.002    0.000 configobj.py:1245(_load)
        6    0.000    0.000    0.002    0.000 configobj.py:2116(validate)
       12    0.001    0.000    0.002    0.000 configobj.py:1533(_parse)

... as opposed to the 181 function calls it took in r9872.

This is most likely due to the integration of ScoreManagerConfiguration.
This increase from 181 to 6,658 is probably nothing to worry about.
