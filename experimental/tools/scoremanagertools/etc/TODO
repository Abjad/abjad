1.  Something takes a bunch of time. So optimize to make stuff take much less time.
    Possibly by removing unnecessary output_material.py module interpretation.
    Also possibly by removing all [safe_]imports() from the __init__.py files.
    First run profiler to avoid unnecessary tinkering.

2.  Make user input getter defaults work like menu defaults;
    Implement default_value on user input getter.

3.  Fix ScoreManagerObject.handle_user_input_with_default() default handling.

4.  Define range inventories for all scores.

5.  Implement material methods to move material packages from one location to another.

6.  Find a way to include tags management in hidden menu of every package proxy.

7.  Port output change awareness.

8.  Implement something to tour all materials everywhere and examine in sequence.

9.  Make user input handler creation work.

10. Edit instrument transposition.

11. Edit instrument clefs.

12. Remove extra appearance of B-flat clarinet from clarinetist config menu.

13. Change Instrument._default_performer_names to house (full, abbreviation) pairs.

14. Use performer abbreviations to populate performer selection menu.

15. Find a way to dynamically present (default) indicator to default menu entries.

16. Distinguish positional editor parameters from keyword editor parameters.

* * *

17. Currently MaterialPackageMaker inherits from MaterialPackageProxy.
    Maybe MaterialPackageMaker should *have* a MaterialPackageProxy instead.
    This would clean up the inheritance schema somewhat.

18. Audit the UI of the entire materials management system by hand.

19. Add a scores/test directory and check it into the scores repository.
    Then add a scores/test/test_scores_import_scores.py file.
    The file will test 'import red_example_score', 'import green_example_score', and so on.
    This will be a very high-level test to make sure that entire score packages remain importable.

20. Consolidate scores to single repository.

21. Implement example_score_i.music.materials.divisions to import 
    example_score_i.music.materials.time_signatures.
    This will implement an intrapackage material import.
    Implement example_score_ii.music.materials.divisions to 
    import example_score_i.music.materials.time_signatures.
    This will implement an interpackage material import.

22. Remove ModuleProxy.unimport() entirely.

23. Replace all _read_only_attributes.py and _public_attributes.py test files with doctests.

24. Sweep inline scoremanagertools TODO items.

25. Author ScorePackageProxy docstrings.

26. Remove 'grandparent_directory_path'.

27. Remove the has_readable_... and is_readable_... properties from the system entirely.
    Force such functionality to be method calls that will be noticeably expensive.

28. Add PackageystemAssetProxy to superclass ModuleProxy and PackageProxy.

29. Might make sense to implement an SvnManager class.
    This will encapsulate all svn management functionality.

30. Create a PackagesystemAssetProxy to parallel PacakagesystemAssetWrangler.

31. Harmonize user input strings with method names in MaterialPackageProxy.user_input_to_action dictionary.

32. Author StylesheetFileWrangler.interactively_remove_assets() test.
    Will involve making user_input='... rm ...' work with named arguments instead of just numeric arguments.

33. Make a menuing.Token class.
    This will name all token attributes.
    This will also make all attribute extraction methods explicit.
    This will also eliminate all numeric tuple field references.

34. Make MaterialPackageMaker classes stop creating materials in tools.scoremanagertools.materialpackages.
    Those classes should create material packages in the user asset library material packages directory.
    Or in user score packages. But no material packages should ever be created in the built-in
    asset library material packages directory.
