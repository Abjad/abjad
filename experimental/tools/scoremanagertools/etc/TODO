1.  Something takes a bunch of time. So optimize to make stuff take much less time.
    Possibly by removing unnecessary output_material.py module interpretation.
    Also possibly by removing all [safe_]imports() from the __init__.py files.
    First run profiler to avoid unnecessary tinkering.

2.  Make user input getter defaults work like menu defaults;
    Implement default_value on user input getter.

3.  Fix ScoreManagerObject.handle_user_input_with_default() default handling.

4.  Define range inventories for all scores.

5.  Implement material methods to move material packages from one location to another.

6.  Find a way to include tags management in hidden menu of every package proxy.

7.  Port output change awareness.

8.  Implement something to tour all materials everywhere and examine in sequence.

9.  Make user input handler creation work.

10. Edit instrument transposition.

11. Edit instrument clefs.

12. Remove extra appearance of B-flat clarinet from clarinetist config menu.

13. Change Instrument._default_performer_names to house (full, abbreviation) pairs.

14. Use performer abbreviations to populate performer selection menu.

15. Find a way to dynamically present (default) indicator to default menu entries.

16. Consider keyword backtracking protocol to replace self._session.push_backtrack() / self._session.pop_backtrack().

17. Distinguish positional editor parameters from keyword editor parameters.

* * *

18. Consolidate scores to single repository.

19. Add a scores/test directory and check it into the scores repository.
    Then add a scores/test/test_scores_import_scores.py file.
    The file will test 'import red_example_score', 'import green_example_score', and so on.
    This will be a very high-level test to make sure that entire score packages remain importable.

20. Simplify custom_score/music/materials/__init__.py files.
    File should probably contain nothing.
    What is the design goal?
    The design goal is that the score manager should always start.
    The score manager should start even when a score directory contains explosively bad code.
    This means that the score manager should basically import no code.
    If the user requests explicit import then the score manager should use safe import.
    Ultimately this should mean that safe_import() can be removed from *all* __init__.py files everywhere.
    The system might preserve safe_import() to be used in direct response to user request for explicit import.

21. Implement example_score_i.music.materials.divisions to import 
    example_score_i.music.materials.time_signatures.
    This will implement an intrapackage material import.
    Implement example_score_ii.music.materials.divisions to 
    import example_score_i.music.materials.time_signatures.
    This will implement an interpackage material import.

22. Remove the has_readable_... and is_readable_... properties from the system entirely.
    Force such functionality to be method calls that will be noticeably expensive.

23. Migrate all build_illustration.py modules from separate modules to bound class methods.

24. Audit the UI of the entire materials management system by hand.

25. Currently MaterialPackageMaker inherits from MaterialPackageProxy.
    Maybe MaterialPackageMaker should *have* a MaterialPackageProxy instead.
    This would clean up the inheritance schema somewhat.

26. The wrangler inheritance hierarchy is confused.
    Look at the inheritance diagram given at FilesystemAssetWrangler.html and rewire as appropriate.

27. Sweep inline scoremanagertools TODO items.

28. Remove 'grandparent_directory_path'.

29. Remove ModuleProxy.unimport() entirely.

30. Author a test that captures "home > specifiers" in the UI.

31. Remove (or rename) Specifier.format and TargetManifest.format properties.

32. Reduce (or completely remove!) calls to packagesystemtools in PackagesystemAssetWrangler.

33. Reimplement self._handle_main_menu_result methods around dictionaries.

34. Rename flamingo_input to something semantic.

35. Add ScoreManagerConfiguration.user_directory property.

36. Document StylesheetFileProxy next.

37. Change asset_container_directory_path to asset_container_filesystem_path globally.

38. Change user_asset_container_directory_paths (plural) to user_asset_container_directory_path (singular).

39. Author ScorePackageProxy docstrings.

40. Replace all _read_only_attributes.py and _public_attributes.py test files with doctests.

41. Make ScoreManagerConfiguration READ ONLY!

42. Revisit score_manager/configuration.py file.
    The only necessary user settings should be these:
        user_collateral_directory_path = /Users/trevorbaca/collateral
        user_scores_directory_path = /Users/trevorbaca/Documents/scores
        user_sketches_directory_path = /Users/trevorbaca/Documents/sketches
    * create ~/.score_manager by default and store configuration in it
    * store configuration.py in  ~/.score_manager
    * store transcripts in ~/.score_manager
    * store user material package makers in user collateral directory
    * store user stylesheets in user collateral directory

43. Rename packagesystemtools.package_exists() to packagesystemtools.exists().
