import pytest

from abjad.pitch import (
    NamedInterval,
    NamedIntervalClass,
    NumberedInterval,
    NumberedIntervalClass,
)

values = []

values.extend(
    [
        (-24, -12, "-P8"),
        (-23, -11, "-M7"),
        (-22, -10, "-m7"),
        (-21, -9, "-M6"),
        (-20, -8, "-m6"),
        (-19, -7, "-P5"),
        (-18, -6, "-d5"),
        (-17, -5, "-P4"),
        (-16, -4, "-M3"),
        (-15, -3, "-m3"),
        (-14, -2, "-M2"),
        (-13, -1, "-m2"),
        (-12, -12, "-P8"),
        (-11, -11, "-M7"),
        (-10, -10, "-m7"),
        (-9, -9, "-M6"),
        (-8, -8, "-m6"),
        (-7, -7, "-P5"),
        (-6, -6, "-d5"),
        (-5, -5, "-P4"),
        (-4, -4, "-M3"),
        (-3, -3, "-m3"),
        (-2, -2, "-M2"),
        (-1, -1, "-m2"),
        (0, 0, "P1"),
        (1, 1, "+m2"),
        (2, 2, "+M2"),
        (3, 3, "+m3"),
        (4, 4, "+M3"),
        (5, 5, "+P4"),
        (6, 6, "+d5"),
        (7, 7, "+P5"),
        (8, 8, "+m6"),
        (9, 9, "+M6"),
        (10, 10, "+m7"),
        (11, 11, "+M7"),
        (12, 12, "+P8"),
        (13, 1, "+m2"),
        (14, 2, "+M2"),
        (15, 3, "+m3"),
        (16, 4, "+M3"),
        (17, 5, "+P4"),
        (18, 6, "+d5"),
        (19, 7, "+P5"),
        (20, 8, "+m6"),
        (21, 9, "+M6"),
        (22, 10, "+m7"),
        (23, 11, "+M7"),
        (24, 12, "+P8"),
    ]
)

values.extend(
    [
        ("-A1", -1, "-A1"),
        ("-A10", -5, "-A3"),
        ("-A11", -6, "-A4"),
        ("-A12", -8, "-A5"),
        ("-A13", -10, "-A6"),
        ("-A14", -12, "-A7"),
        ("-A2", -3, "-A2"),
        ("-A3", -5, "-A3"),
        ("-A4", -6, "-A4"),
        ("-A5", -8, "-A5"),
        ("-A6", -10, "-A6"),
        ("-A7", -12, "-A7"),
        ("-A8", -1, "-A1"),
        ("-A9", -3, "-A2"),
        ("-AA1", -2, "-AA1"),
        ("-AA10", -6, "-AA3"),
        ("-AA11", -7, "-AA4"),
        ("-AA12", -9, "-AA5"),
        ("-AA13", -11, "-AA6"),
        ("-AA14", -1, "-AA7"),
        ("-AA2", -4, "-AA2"),
        ("-AA3", -6, "-AA3"),
        ("-AA4", -7, "-AA4"),
        ("-AA5", -9, "-AA5"),
        ("-AA6", -11, "-AA6"),
        ("-AA7", -1, "-AA7"),
        ("-AA8", -2, "-AA1"),
        ("-AA9", -4, "-AA2"),
        ("-AAA1", -3, "-AAA1"),
        ("-AAA10", -7, "-AAA3"),
        ("-AAA11", -8, "-AAA4"),
        ("-AAA12", -10, "-AAA5"),
        ("-AAA13", -12, "-AAA6"),
        ("-AAA14", -2, "-AAA7"),
        ("-AAA2", -5, "-AAA2"),
        ("-AAA3", -7, "-AAA3"),
        ("-AAA4", -8, "-AAA4"),
        ("-AAA5", -10, "-AAA5"),
        ("-AAA6", -12, "-AAA6"),
        ("-AAA7", -2, "-AAA7"),
        ("-AAA8", -3, "-AAA1"),
        ("-AAA9", -5, "-AAA2"),
        ("-M10", -4, "-M3"),
        ("-M13", -9, "-M6"),
        ("-M2", -2, "-M2"),
        ("-M3", -4, "-M3"),
        ("-M6", -9, "-M6"),
        ("-M7", -11, "-M7"),
        ("-M9", -2, "-M2"),
        ("-P1", -0, "P1"),
        ("-P11", -5, "-P4"),
        ("-P12", -7, "-P5"),
        ("-P15", -12, "-P8"),
        ("-P4", -5, "-P4"),
        ("-P5", -7, "-P5"),
        ("-P8", -12, "-P8"),
        ("-d1", -1, "-d1"),
        ("-d10", -2, "-d3"),
        ("-d11", -4, "-d4"),
        ("-d12", -6, "-d5"),
        ("-d13", -7, "-d6"),
        ("-d14", -9, "-d7"),
        ("-d2", -0, "-d2"),
        ("-d3", -2, "-d3"),
        ("-d4", -4, "-d4"),
        ("-d5", -6, "-d5"),
        ("-d6", -7, "-d6"),
        ("-d7", -9, "-d7"),
        ("-d8", 1, "+d1"),
        ("-d9", 0, "-d2"),
        ("-dd1", -2, "-dd1"),
        ("-dd10", -1, "-dd3"),
        ("-dd11", -3, "-dd4"),
        ("-dd12", -5, "-dd5"),
        ("-dd13", -6, "-dd6"),
        ("-dd14", -8, "-dd7"),
        ("-dd2", 1, "-dd2"),
        ("-dd3", -1, "-dd3"),
        ("-dd4", -3, "-dd4"),
        ("-dd5", -5, "-dd5"),
        ("-dd6", -6, "-dd6"),
        ("-dd7", -8, "-dd7"),
        ("-dd8", 2, "+dd1"),
        ("-dd9", 1, "-dd2"),
        ("-ddd1", -3, "-ddd1"),
        ("-ddd11", -2, "-ddd4"),
        ("-ddd12", -4, "-ddd5"),
        ("-ddd13", -5, "-ddd6"),
        ("-ddd14", -7, "-ddd7"),
        ("-ddd2", 2, "-ddd2"),
        ("-ddd3", 0, "-ddd3"),
        ("-ddd4", -2, "-ddd4"),
        ("-ddd5", -4, "-ddd5"),
        ("-ddd6", -5, "-ddd6"),
        ("-ddd7", -7, "-ddd7"),
        ("-ddd8", 3, "+ddd1"),
        ("-ddd9", 2, "-ddd2"),
        ("-m10", -3, "-m3"),
        ("-m13", -8, "-m6"),
        ("-m14", -10, "-m7"),
        ("-m2", -1, "-m2"),
        ("-m3", -3, "-m3"),
        ("-m6", -8, "-m6"),
        ("-m7", -10, "-m7"),
        ("-m9", -1, "-m2"),
        ("A1", 1, "+A1"),
        ("A10", 5, "+A3"),
        ("A11", 6, "+A4"),
        ("A12", 8, "+A5"),
        ("A13", 10, "+A6"),
        ("A14", 12, "+A7"),
        ("A2", 3, "+A2"),
        ("A3", 5, "+A3"),
        ("A4", 6, "+A4"),
        ("A5", 8, "+A5"),
        ("A6", 10, "+A6"),
        ("A7", 12, "+A7"),
        ("A8", 1, "+A1"),
        ("A9", 3, "+A2"),
        ("AA1", 2, "+AA1"),
        ("AA10", 6, "+AA3"),
        ("AA11", 7, "+AA4"),
        ("AA12", 9, "+AA5"),
        ("AA13", 11, "+AA6"),
        ("AA14", 1, "+AA7"),
        ("AA2", 4, "+AA2"),
        ("AA3", 6, "+AA3"),
        ("AA4", 7, "+AA4"),
        ("AA5", 9, "+AA5"),
        ("AA6", 11, "+AA6"),
        ("AA7", 1, "+AA7"),
        ("AA8", 2, "+AA1"),
        ("AA9", 4, "+AA2"),
        ("AAA1", 3, "+AAA1"),
        ("AAA10", 7, "+AAA3"),
        ("AAA11", 8, "+AAA4"),
        ("AAA12", 10, "+AAA5"),
        ("AAA13", 12, "+AAA6"),
        ("AAA14", 2, "+AAA7"),
        ("AAA2", 5, "+AAA2"),
        ("AAA3", 7, "+AAA3"),
        ("AAA4", 8, "+AAA4"),
        ("AAA5", 10, "+AAA5"),
        ("AAA6", 12, "+AAA6"),
        ("AAA7", 2, "+AAA7"),
        ("AAA8", 3, "+AAA1"),
        ("AAA9", 5, "+AAA2"),
        ("M10", 4, "+M3"),
        ("M13", 9, "+M6"),
        ("M14", 11, "+M7"),
        ("M2", 2, "+M2"),
        ("M3", 4, "+M3"),
        ("M6", 9, "+M6"),
        ("M7", 11, "+M7"),
        ("M9", 2, "+M2"),
        ("P1", 0, "P1"),
        ("P11", 5, "+P4"),
        ("P12", 7, "+P5"),
        ("P15", 12, "+P8"),
        ("P4", 5, "+P4"),
        ("P5", 7, "+P5"),
        ("P8", 12, "+P8"),
        ("d1", 1, "+d1"),
        ("d10", 2, "+d3"),
        ("d11", 4, "+d4"),
        ("d12", 6, "+d5"),
        ("d13", 7, "+d6"),
        ("d14", 9, "+d7"),
        ("d2", 0, "+d2"),
        ("d3", 2, "+d3"),
        ("d4", 4, "+d4"),
        ("d5", 6, "+d5"),
        ("d6", 7, "+d6"),
        ("d7", 9, "+d7"),
        ("d8", -1, "-d1"),
        ("d9", 0, "+d2"),
        ("dd1", 2, "+dd1"),
        ("dd10", 1, "+dd3"),
        ("dd11", 3, "+dd4"),
        ("dd12", 5, "+dd5"),
        ("dd13", 6, "+dd6"),
        ("dd14", 8, "+dd7"),
        ("dd2", -1, "+dd2"),
        ("dd3", 1, "+dd3"),
        ("dd4", 3, "+dd4"),
        ("dd5", 5, "+dd5"),
        ("dd6", 6, "+dd6"),
        ("dd7", 8, "+dd7"),
        ("dd8", -2, "-dd1"),
        ("dd9", -1, "+dd2"),
        ("ddd1", 3, "+ddd1"),
        ("ddd10", 0, "+ddd3"),
        ("ddd11", 2, "+ddd4"),
        ("ddd12", 4, "+ddd5"),
        ("ddd13", 5, "+ddd6"),
        ("ddd14", 7, "+ddd7"),
        ("ddd2", -2, "+ddd2"),
        ("ddd3", 0, "+ddd3"),
        ("ddd4", 2, "+ddd4"),
        ("ddd5", 4, "+ddd5"),
        ("ddd6", 5, "+ddd6"),
        ("ddd7", 7, "+ddd7"),
        ("ddd8", -3, "-ddd1"),
        ("ddd9", -2, "+ddd2"),
        ("m10", 3, "+m3"),
        ("m13", 8, "+m6"),
        ("m14", 10, "+m7"),
        ("m2", 1, "+m2"),
        ("m3", 3, "+m3"),
        ("m6", 8, "+m6"),
        ("m7", 10, "+m7"),
        ("m9", 1, "+m2"),
    ]
)

values.extend(
    [
        (("M", 1), ValueError, None),
        (("M", 4), ValueError, None),
        (("M", 5), ValueError, None),
        (("P", 2), ValueError, None),
        (("P", 3), ValueError, None),
        (("P", 6), ValueError, None),
        (("P", 7), ValueError, None),
        (("m", 1), ValueError, None),
        (("m", 4), ValueError, None),
        (("m", 5), ValueError, None),
    ]
)


@pytest.mark.parametrize("input_, semitones, name", values)
def test_init(input_, semitones, name):
    class_ = NamedIntervalClass
    if isinstance(semitones, type) and issubclass(semitones, Exception):
        with pytest.raises(semitones):
            class_(input_)
        return
    instance = class_(input_)
    assert float(instance) == semitones
    assert instance.name == name
    NamedInterval(instance)
    NamedIntervalClass(instance)
    NumberedInterval(instance)
    NumberedIntervalClass(instance)
